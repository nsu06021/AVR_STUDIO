
20190524DCmotor01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000053  00000000  00000000  00000909  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000145  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e1  00000000  00000000  00000aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ea  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000cf  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00000e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000002b  00000000  00000000  00000f2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 98 00 	call	0x130	; 0x130 <main>
  9c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <us_delay>:

void us_delay(unsigned int us_time)
{
   unsigned int i;

   for(i=0; i<us_time; i++) {
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	08 c0       	rjmp	.+16     	; 0xba <us_delay+0x16>
      asm("PUSH R0");    
  aa:	0f 92       	push	r0
      asm("POP R0");
  ac:	0f 90       	pop	r0
      asm("PUSH R0");
  ae:	0f 92       	push	r0
      asm("POP R0");
  b0:	0f 90       	pop	r0
      asm("PUSH R0");
  b2:	0f 92       	push	r0
      asm("POP R0");
  b4:	0f 90       	pop	r0

void us_delay(unsigned int us_time)
{
   unsigned int i;

   for(i=0; i<us_time; i++) {
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	28 17       	cp	r18, r24
  bc:	39 07       	cpc	r19, r25
  be:	a8 f3       	brcs	.-22     	; 0xaa <us_delay+0x6>
      asm("PUSH R0");
      asm("POP R0");
      asm("PUSH R0");
      asm("POP R0");
   }
}
  c0:	08 95       	ret

000000c2 <ms_delay>:

void ms_delay(unsigned int ms_time)
{
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	8c 01       	movw	r16, r24
   unsigned int i;

   for(i=0;i<ms_time;i++)
  cc:	c0 e0       	ldi	r28, 0x00	; 0
  ce:	d0 e0       	ldi	r29, 0x00	; 0
  d0:	05 c0       	rjmp	.+10     	; 0xdc <ms_delay+0x1a>
      us_delay(1000);
  d2:	88 ee       	ldi	r24, 0xE8	; 232
  d4:	93 e0       	ldi	r25, 0x03	; 3
  d6:	0e 94 52 00 	call	0xa4	; 0xa4 <us_delay>

void ms_delay(unsigned int ms_time)
{
   unsigned int i;

   for(i=0;i<ms_time;i++)
  da:	21 96       	adiw	r28, 0x01	; 1
  dc:	c0 17       	cp	r28, r16
  de:	d1 07       	cpc	r29, r17
  e0:	c0 f3       	brcs	.-16     	; 0xd2 <ms_delay+0x10>
      us_delay(1000);
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	1f 91       	pop	r17
  e8:	0f 91       	pop	r16
  ea:	08 95       	ret

000000ec <init_TIMER3>:


void init_TIMER3(void)
{
   TCCR3A = 0x82;
  ec:	82 e8       	ldi	r24, 0x82	; 130
  ee:	80 93 8b 00 	sts	0x008B, r24
   TCCR3B = 0x1A;
  f2:	8a e1       	ldi	r24, 0x1A	; 26
  f4:	80 93 8a 00 	sts	0x008A, r24
   TCCR3C = 0; 
  f8:	10 92 8c 00 	sts	0x008C, r1
   TCNT3 = 0;
  fc:	10 92 89 00 	sts	0x0089, r1
 100:	10 92 88 00 	sts	0x0088, r1
   OCR3A = 5000;   //3400~2600~
 104:	88 e8       	ldi	r24, 0x88	; 136
 106:	93 e1       	ldi	r25, 0x13	; 19
 108:	90 93 87 00 	sts	0x0087, r25
 10c:	80 93 86 00 	sts	0x0086, r24
   ICR3 = 40000;
 110:	80 e4       	ldi	r24, 0x40	; 64
 112:	9c e9       	ldi	r25, 0x9C	; 156
 114:	90 93 81 00 	sts	0x0081, r25
 118:	80 93 80 00 	sts	0x0080, r24
   TIFR = 0x00;
 11c:	16 be       	out	0x36, r1	; 54
   TIMSK = 0x00;
 11e:	17 be       	out	0x37, r1	; 55
   ETIMSK = 0x00;
 120:	10 92 7d 00 	sts	0x007D, r1
   ETIFR = 0x00;
 124:	10 92 7c 00 	sts	0x007C, r1
}
 128:	08 95       	ret

0000012a <init_Port>:

void init_Port(void)
{
   DDRE = 0xff;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	82 b9       	out	0x02, r24	; 2
}
 12e:	08 95       	ret

00000130 <main>:
   ETIFR = 0x00;
}

void init_Port(void)
{
   DDRE = 0xff;
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	82 b9       	out	0x02, r24	; 2
int main(void)
{
   unsigned int i;

   init_Port();
   init_TIMER3();
 134:	0e 94 76 00 	call	0xec	; 0xec <init_TIMER3>
   {
      OCR3A = i;
	  ms_delay(100);
   }*/

}
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
