
LineServo1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000038e  00000422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000106  00800120  00800120  00000442  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000c3  00000000  00000000  00000bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000245  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000101  00000000  00000000  00000ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003a3  00000000  00000000  00000fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a0  00000000  00000000  00001364  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000103  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000b8  00000000  00000000  00001507  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000002b  00000000  00000000  000015bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_21>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e8       	ldi	r30, 0x8E	; 142
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	12 e0       	ldi	r17, 0x02	; 2
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 32       	cpi	r26, 0x26	; 38
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 a4 01 	call	0x348	; 0x348 <main>
  c6:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <usDelay>:

void usDelay(unsigned int us)
{
   unsigned int i;

   for(i=0; i<us; i++) {
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	08 c0       	rjmp	.+16     	; 0xe4 <usDelay+0x16>
      asm("PUSH R0");
  d4:	0f 92       	push	r0
      asm("POP R0");
  d6:	0f 90       	pop	r0
      asm("PUSH R0");
  d8:	0f 92       	push	r0
      asm("POP R0");
  da:	0f 90       	pop	r0
      asm("PUSH R0");
  dc:	0f 92       	push	r0
      asm("POP R0");
  de:	0f 90       	pop	r0

void usDelay(unsigned int us)
{
   unsigned int i;

   for(i=0; i<us; i++) {
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	28 17       	cp	r18, r24
  e6:	39 07       	cpc	r19, r25
  e8:	a8 f3       	brcs	.-22     	; 0xd4 <usDelay+0x6>
      asm("PUSH R0");
      asm("POP R0");
      asm("PUSH R0");
      asm("POP R0");
   }
}
  ea:	08 95       	ret

000000ec <msDelay>:

void msDelay(unsigned int ms)
{
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	8c 01       	movw	r16, r24
   unsigned int i;

   for(i=0;i<ms;i++)
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	05 c0       	rjmp	.+10     	; 0x106 <msDelay+0x1a>
      usDelay(1000);
  fc:	88 ee       	ldi	r24, 0xE8	; 232
  fe:	93 e0       	ldi	r25, 0x03	; 3
 100:	0e 94 67 00 	call	0xce	; 0xce <usDelay>

void msDelay(unsigned int ms)
{
   unsigned int i;

   for(i=0;i<ms;i++)
 104:	21 96       	adiw	r28, 0x01	; 1
 106:	c0 17       	cp	r28, r16
 108:	d1 07       	cpc	r29, r17
 10a:	c0 f3       	brcs	.-16     	; 0xfc <msDelay+0x10>
      usDelay(1000);
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <init_TIMER1>:

void init_TIMER1(void)
{
   TCCR1A = 0xA2;   //0x22
 116:	82 ea       	ldi	r24, 0xA2	; 162
 118:	8f bd       	out	0x2f, r24	; 47
   TCCR1B = 0x1A;
 11a:	8a e1       	ldi	r24, 0x1A	; 26
 11c:	8e bd       	out	0x2e, r24	; 46
   TCCR1C = 0; 
 11e:	10 92 7a 00 	sts	0x007A, r1
   TCNT1 = 0;
 122:	1d bc       	out	0x2d, r1	; 45
 124:	1c bc       	out	0x2c, r1	; 44
   OCR1A = 40000;  //75%~
 126:	80 e4       	ldi	r24, 0x40	; 64
 128:	9c e9       	ldi	r25, 0x9C	; 156
 12a:	9b bd       	out	0x2b, r25	; 43
 12c:	8a bd       	out	0x2a, r24	; 42
   OCR1B = 2200;   //2800(L)~2200(C)~1800(R)
 12e:	28 e9       	ldi	r18, 0x98	; 152
 130:	38 e0       	ldi	r19, 0x08	; 8
 132:	39 bd       	out	0x29, r19	; 41
 134:	28 bd       	out	0x28, r18	; 40
   ICR1 = 40000;
 136:	97 bd       	out	0x27, r25	; 39
 138:	86 bd       	out	0x26, r24	; 38
   TIFR = 0x00;
 13a:	16 be       	out	0x36, r1	; 54
   TIMSK = 0x00;
 13c:	17 be       	out	0x37, r1	; 55
   ETIMSK = 0x00;
 13e:	10 92 7d 00 	sts	0x007D, r1
   ETIFR = 0x00;
 142:	10 92 7c 00 	sts	0x007C, r1
}
 146:	08 95       	ret

00000148 <initADC>:



void initADC(void)
{
   ADMUX = 0x42;   //기준전압; 외부 캐퍼시터 가진AVcc(AREF 핀)
 148:	82 e4       	ldi	r24, 0x42	; 66
 14a:	87 b9       	out	0x07, r24	; 7
               //AC 변환 데이터 정렬; 오른쪽 정렬
               //AD 변환 채널 선택; PortF 0 핀

   ADCSRA= 0xc8;   //ADC 인에이블, ADC 변환 시작, ADC인터럽트 인에이블
 14c:	88 ec       	ldi	r24, 0xC8	; 200
 14e:	86 b9       	out	0x06, r24	; 6
               //ADC 클록 설정; XTAL의1/2(8MHz)

   //DDRF = 0x03;   //PortF[3..0] 입력으로 설정, PortF[7..4] 출력으로 설정
   //DIDR0 = 0x0f;   //디지털 입력 불가 PortF[3..0]
   
}
 150:	08 95       	ret

00000152 <__vector_21>:



SIGNAL(ADC_vect)
   {
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
      //int i = 0; 

      ADdata=ADC;      //AD 변환 데이터를 ADdata 에 저장
 160:	84 b1       	in	r24, 0x04	; 4
 162:	95 b1       	in	r25, 0x05	; 5
 164:	90 93 23 01 	sts	0x0123, r25
 168:	80 93 22 01 	sts	0x0122, r24
     i++;
     if(i>127){
        i=0;
      }*/
     
      ADCSRA = 0xc8;   //ADC 인에이블, ADC 변환 시작, ADC인터럽트 인에이블
 16c:	88 ec       	ldi	r24, 0xC8	; 200
 16e:	86 b9       	out	0x06, r24	; 6

   }
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <Refresh>:



void Refresh()
{
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
   int i;

   SI_1;
 182:	80 91 62 00 	lds	r24, 0x0062
 186:	82 60       	ori	r24, 0x02	; 2
 188:	80 93 62 00 	sts	0x0062, r24
   usDelay(SI_WIDTH);
 18c:	88 ee       	ldi	r24, 0xE8	; 232
 18e:	93 e0       	ldi	r25, 0x03	; 3
 190:	0e 94 67 00 	call	0xce	; 0xce <usDelay>
   CLK_1;
 194:	80 91 62 00 	lds	r24, 0x0062
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	80 93 62 00 	sts	0x0062, r24
   usDelay(SI_WIDTH);
 19e:	88 ee       	ldi	r24, 0xE8	; 232
 1a0:	93 e0       	ldi	r25, 0x03	; 3
 1a2:	0e 94 67 00 	call	0xce	; 0xce <usDelay>
   SI_0;
 1a6:	80 91 62 00 	lds	r24, 0x0062
 1aa:	8d 7f       	andi	r24, 0xFD	; 253
 1ac:	80 93 62 00 	sts	0x0062, r24
   usDelay(SI_WIDTH);
 1b0:	88 ee       	ldi	r24, 0xE8	; 232
 1b2:	93 e0       	ldi	r25, 0x03	; 3
 1b4:	0e 94 67 00 	call	0xce	; 0xce <usDelay>
   CLK_0;
 1b8:	80 91 62 00 	lds	r24, 0x0062
 1bc:	8e 7f       	andi	r24, 0xFE	; 254
 1be:	80 93 62 00 	sts	0x0062, r24
 1c2:	c6 e9       	ldi	r28, 0x96	; 150
 1c4:	d0 e0       	ldi	r29, 0x00	; 0

   for(i=0;i<150;i++){
      CLK_1;
 1c6:	80 91 62 00 	lds	r24, 0x0062
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	80 93 62 00 	sts	0x0062, r24
      usDelay(CLK_WIDTH );
 1d0:	8a e0       	ldi	r24, 0x0A	; 10
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 67 00 	call	0xce	; 0xce <usDelay>
      CLK_0;
 1d8:	80 91 62 00 	lds	r24, 0x0062
 1dc:	8e 7f       	andi	r24, 0xFE	; 254
 1de:	80 93 62 00 	sts	0x0062, r24
      usDelay(CLK_WIDTH );
 1e2:	8a e0       	ldi	r24, 0x0A	; 10
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 67 00 	call	0xce	; 0xce <usDelay>
 1ea:	21 97       	sbiw	r28, 0x01	; 1
   usDelay(SI_WIDTH);
   SI_0;
   usDelay(SI_WIDTH);
   CLK_0;

   for(i=0;i<150;i++){
 1ec:	61 f7       	brne	.-40     	; 0x1c6 <Refresh+0x48>
      CLK_1;
      usDelay(CLK_WIDTH );
      CLK_0;
      usDelay(CLK_WIDTH );
   }
   SI_1;
 1ee:	80 91 62 00 	lds	r24, 0x0062
 1f2:	82 60       	ori	r24, 0x02	; 2
 1f4:	80 93 62 00 	sts	0x0062, r24
   usDelay(SI_WIDTH);
 1f8:	88 ee       	ldi	r24, 0xE8	; 232
 1fa:	93 e0       	ldi	r25, 0x03	; 3
 1fc:	0e 94 67 00 	call	0xce	; 0xce <usDelay>
}
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <ConShot>:

void ConShot()
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
   int i;

   SI_0;
 20a:	80 91 62 00 	lds	r24, 0x0062
 20e:	8d 7f       	andi	r24, 0xFD	; 253
 210:	80 93 62 00 	sts	0x0062, r24
   CLK_0;
 214:	80 91 62 00 	lds	r24, 0x0062
 218:	8e 7f       	andi	r24, 0xFE	; 254
 21a:	80 93 62 00 	sts	0x0062, r24
   usDelay(SI_WIDTH);
 21e:	88 ee       	ldi	r24, 0xE8	; 232
 220:	93 e0       	ldi	r25, 0x03	; 3
 222:	0e 94 67 00 	call	0xce	; 0xce <usDelay>
   SI_1;
 226:	80 91 62 00 	lds	r24, 0x0062
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	80 93 62 00 	sts	0x0062, r24
   usDelay(SI_WIDTH);
 230:	88 ee       	ldi	r24, 0xE8	; 232
 232:	93 e0       	ldi	r25, 0x03	; 3
 234:	0e 94 67 00 	call	0xce	; 0xce <usDelay>
   CLK_1;
 238:	80 91 62 00 	lds	r24, 0x0062
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	80 93 62 00 	sts	0x0062, r24
   usDelay(CLK_WIDTH );
 242:	8a e0       	ldi	r24, 0x0A	; 10
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 67 00 	call	0xce	; 0xce <usDelay>
   SI_0;
 24a:	80 91 62 00 	lds	r24, 0x0062
 24e:	8d 7f       	andi	r24, 0xFD	; 253
 250:	80 93 62 00 	sts	0x0062, r24
   usDelay(CLK_WIDTH );
 254:	8a e0       	ldi	r24, 0x0A	; 10
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 67 00 	call	0xce	; 0xce <usDelay>
   CLK_0;
 25c:	80 91 62 00 	lds	r24, 0x0062
 260:	8e 7f       	andi	r24, 0xFE	; 254
 262:	80 93 62 00 	sts	0x0062, r24
 266:	c4 e2       	ldi	r28, 0x24	; 36
 268:	d1 e0       	ldi	r29, 0x01	; 1
   
   for(i=0;i<128;i++){
      CLK_1;
 26a:	80 91 62 00 	lds	r24, 0x0062
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	80 93 62 00 	sts	0x0062, r24
      usDelay(CLK_WIDTH );
 274:	8a e0       	ldi	r24, 0x0A	; 10
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 67 00 	call	0xce	; 0xce <usDelay>
      CLK_0;
 27c:	80 91 62 00 	lds	r24, 0x0062
 280:	8e 7f       	andi	r24, 0xFE	; 254
 282:	80 93 62 00 	sts	0x0062, r24
      usDelay(CLK_WIDTH );
 286:	8a e0       	ldi	r24, 0x0A	; 10
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 67 00 	call	0xce	; 0xce <usDelay>
      line[i] = ADdata;
 28e:	80 91 22 01 	lds	r24, 0x0122
 292:	90 91 23 01 	lds	r25, 0x0123
 296:	89 93       	st	Y+, r24
 298:	99 93       	st	Y+, r25
   usDelay(CLK_WIDTH );
   SI_0;
   usDelay(CLK_WIDTH );
   CLK_0;
   
   for(i=0;i<128;i++){
 29a:	22 e0       	ldi	r18, 0x02	; 2
 29c:	c4 32       	cpi	r28, 0x24	; 36
 29e:	d2 07       	cpc	r29, r18
 2a0:	21 f7       	brne	.-56     	; 0x26a <ConShot+0x64>
   }
   if((line[1]+line[2]+line[3]+line[4]+line[5])/5<500)
   {
      OCR1B = 1800;
   }*/
   	if((line[1]+line[2]+line[3]+line[4]+line[5])/5<500)
 2a2:	80 91 28 01 	lds	r24, 0x0128
 2a6:	90 91 29 01 	lds	r25, 0x0129
 2aa:	20 91 26 01 	lds	r18, 0x0126
 2ae:	30 91 27 01 	lds	r19, 0x0127
 2b2:	82 0f       	add	r24, r18
 2b4:	93 1f       	adc	r25, r19
 2b6:	20 91 2a 01 	lds	r18, 0x012A
 2ba:	30 91 2b 01 	lds	r19, 0x012B
 2be:	82 0f       	add	r24, r18
 2c0:	93 1f       	adc	r25, r19
 2c2:	20 91 2c 01 	lds	r18, 0x012C
 2c6:	30 91 2d 01 	lds	r19, 0x012D
 2ca:	82 0f       	add	r24, r18
 2cc:	93 1f       	adc	r25, r19
 2ce:	20 91 2e 01 	lds	r18, 0x012E
 2d2:	30 91 2f 01 	lds	r19, 0x012F
 2d6:	82 0f       	add	r24, r18
 2d8:	93 1f       	adc	r25, r19
 2da:	29 e0       	ldi	r18, 0x09	; 9
 2dc:	84 3c       	cpi	r24, 0xC4	; 196
 2de:	92 07       	cpc	r25, r18
 2e0:	20 f4       	brcc	.+8      	; 0x2ea <ConShot+0xe4>
    {
	   OCR1B = 1800;
 2e2:	88 e0       	ldi	r24, 0x08	; 8
 2e4:	97 e0       	ldi	r25, 0x07	; 7
 2e6:	99 bd       	out	0x29, r25	; 41
 2e8:	88 bd       	out	0x28, r24	; 40
	}	
	if((line[122]+line[123]+line[124]+line[125]+line[126])/5<500)
 2ea:	80 91 1a 02 	lds	r24, 0x021A
 2ee:	90 91 1b 02 	lds	r25, 0x021B
 2f2:	20 91 18 02 	lds	r18, 0x0218
 2f6:	30 91 19 02 	lds	r19, 0x0219
 2fa:	82 0f       	add	r24, r18
 2fc:	93 1f       	adc	r25, r19
 2fe:	20 91 1c 02 	lds	r18, 0x021C
 302:	30 91 1d 02 	lds	r19, 0x021D
 306:	82 0f       	add	r24, r18
 308:	93 1f       	adc	r25, r19
 30a:	20 91 1e 02 	lds	r18, 0x021E
 30e:	30 91 1f 02 	lds	r19, 0x021F
 312:	82 0f       	add	r24, r18
 314:	93 1f       	adc	r25, r19
 316:	20 91 20 02 	lds	r18, 0x0220
 31a:	30 91 21 02 	lds	r19, 0x0221
 31e:	82 0f       	add	r24, r18
 320:	93 1f       	adc	r25, r19
 322:	29 e0       	ldi	r18, 0x09	; 9
 324:	84 3c       	cpi	r24, 0xC4	; 196
 326:	92 07       	cpc	r25, r18
 328:	20 f4       	brcc	.+8      	; 0x332 <ConShot+0x12c>
    {
	   OCR1B = 2800;
 32a:	80 ef       	ldi	r24, 0xF0	; 240
 32c:	9a e0       	ldi	r25, 0x0A	; 10
 32e:	99 bd       	out	0x29, r25	; 41
 330:	88 bd       	out	0x28, r24	; 40
   else
   {
      OCR1B = 2200;
   }*/
   
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <init_Port>:

void init_Port(void)
{
   DDRF = 0xf3;
 338:	83 ef       	ldi	r24, 0xF3	; 243
 33a:	80 93 61 00 	sts	0x0061, r24
   DDRB = 0xff;
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	87 bb       	out	0x17, r24	; 23
   PORTB = 0x30;
 342:	80 e3       	ldi	r24, 0x30	; 48
 344:	88 bb       	out	0x18, r24	; 24
}
 346:	08 95       	ret

00000348 <main>:
int main(void)
{

     //initADC();               //AD 변환 초기화
     
	 init_Port();                //입출력 포트 초기화
 348:	0e 94 9c 01 	call	0x338	; 0x338 <init_Port>
	 msDelay(100);
 34c:	84 e6       	ldi	r24, 0x64	; 100
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 76 00 	call	0xec	; 0xec <msDelay>
	 init_TIMER1();
 354:	0e 94 8b 00 	call	0x116	; 0x116 <init_TIMER1>
	 msDelay(100);
 358:	84 e6       	ldi	r24, 0x64	; 100
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 76 00 	call	0xec	; 0xec <msDelay>

     CLK_0;
 360:	80 91 62 00 	lds	r24, 0x0062
 364:	8e 7f       	andi	r24, 0xFE	; 254
 366:	80 93 62 00 	sts	0x0062, r24
     SI_0;
 36a:	80 91 62 00 	lds	r24, 0x0062
 36e:	8d 7f       	andi	r24, 0xFD	; 253
 370:	80 93 62 00 	sts	0x0062, r24
     Refresh();
 374:	0e 94 bf 00 	call	0x17e	; 0x17e <Refresh>
     SI_0;
 378:	80 91 62 00 	lds	r24, 0x0062
 37c:	8d 7f       	andi	r24, 0xFD	; 253
 37e:	80 93 62 00 	sts	0x0062, r24
     


     sei();                     //INT 인에이블 clear = 작동안됨
 382:	78 94       	sei


     while(1)
     {
       ConShot();
 384:	0e 94 03 01 	call	0x206	; 0x206 <ConShot>
 388:	fd cf       	rjmp	.-6      	; 0x384 <main+0x3c>

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
