
REDsensor_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000003e6  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080013a  0080013a  000004b4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000e5  00000000  00000000  00000c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000031e  00000000  00000000  00000d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000100  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000457  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e0  00000000  00000000  00001580  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000013e  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001c0  00000000  00000000  0000179e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000002b  00000000  00000000  0000195e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_21>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ee       	ldi	r30, 0xE6	; 230
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 33       	cpi	r26, 0x3A	; 58
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	aa e3       	ldi	r26, 0x3A	; 58
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 33       	cpi	r26, 0x3E	; 62
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 a9 01 	call	0x352	; 0x352 <main>
  c6:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <usDelay>:

void usDelay(unsigned int us)
{
   unsigned int i;

   for(i=0; i<us; i++) {
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	08 c0       	rjmp	.+16     	; 0xe4 <usDelay+0x16>
      asm("PUSH R0");
  d4:	0f 92       	push	r0
      asm("POP R0");
  d6:	0f 90       	pop	r0
      asm("PUSH R0");
  d8:	0f 92       	push	r0
      asm("POP R0");
  da:	0f 90       	pop	r0
      asm("PUSH R0");
  dc:	0f 92       	push	r0
      asm("POP R0");
  de:	0f 90       	pop	r0

void usDelay(unsigned int us)
{
   unsigned int i;

   for(i=0; i<us; i++) {
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	28 17       	cp	r18, r24
  e6:	39 07       	cpc	r19, r25
  e8:	a8 f3       	brcs	.-22     	; 0xd4 <usDelay+0x6>
      asm("PUSH R0");
      asm("POP R0");
      asm("PUSH R0");
      asm("POP R0");
   }
}
  ea:	08 95       	ret

000000ec <msDelay>:

void msDelay(unsigned int ms)
{
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	8c 01       	movw	r16, r24
   unsigned int i;

   for(i=0;i<ms;i++)
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	05 c0       	rjmp	.+10     	; 0x106 <msDelay+0x1a>
      usDelay(1000);
  fc:	88 ee       	ldi	r24, 0xE8	; 232
  fe:	93 e0       	ldi	r25, 0x03	; 3
 100:	0e 94 67 00 	call	0xce	; 0xce <usDelay>

void msDelay(unsigned int ms)
{
   unsigned int i;

   for(i=0;i<ms;i++)
 104:	21 96       	adiw	r28, 0x01	; 1
 106:	c0 17       	cp	r28, r16
 108:	d1 07       	cpc	r29, r17
 10a:	c0 f3       	brcs	.-16     	; 0xfc <msDelay+0x10>
      usDelay(1000);
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <E_Pulse>:

void E_Pulse(void)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
   EN_1;
 11a:	c5 e6       	ldi	r28, 0x65	; 101
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	88 81       	ld	r24, Y
 120:	84 60       	ori	r24, 0x04	; 4
 122:	88 83       	st	Y, r24

   usDelay(100);      //약 100usec 지연
 124:	84 e6       	ldi	r24, 0x64	; 100
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 67 00 	call	0xce	; 0xce <usDelay>

   EN_0;
 12c:	88 81       	ld	r24, Y
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	88 83       	st	Y, r24
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <initLCD>:

void initLCD(void)
{
   msDelay(40);
 138:	88 e2       	ldi	r24, 0x28	; 40
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 76 00 	call	0xec	; 0xec <msDelay>

   PORTC =0x38;      //Function Set
 140:	88 e3       	ldi	r24, 0x38	; 56
 142:	85 bb       	out	0x15, r24	; 21
   E_Pulse();
 144:	0e 94 8b 00 	call	0x116	; 0x116 <E_Pulse>
   usDelay(40);
 148:	88 e2       	ldi	r24, 0x28	; 40
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 67 00 	call	0xce	; 0xce <usDelay>

   PORTC = 0x0c;      //DisPlay ON/OFF Control
 150:	8c e0       	ldi	r24, 0x0C	; 12
 152:	85 bb       	out	0x15, r24	; 21
   usDelay(40);
 154:	88 e2       	ldi	r24, 0x28	; 40
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 67 00 	call	0xce	; 0xce <usDelay>
   E_Pulse();
 15c:	0e 94 8b 00 	call	0x116	; 0x116 <E_Pulse>

   PORTC =  0x01;      //Display Clear
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	85 bb       	out	0x15, r24	; 21
   msDelay(2);
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 76 00 	call	0xec	; 0xec <msDelay>
   E_Pulse();
 16c:	0e 94 8b 00 	call	0x116	; 0x116 <E_Pulse>

   PORTC = 0x06;      //Entry Mode Set
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	85 bb       	out	0x15, r24	; 21
   E_Pulse();
 174:	0e 94 8b 00 	call	0x116	; 0x116 <E_Pulse>
}
 178:	08 95       	ret

0000017a <Write_Char>:

void Write_Char(unsigned char buf)
{
   LCD_RS_1;         //문자 입출력 모드 설정
 17a:	e5 e6       	ldi	r30, 0x65	; 101
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	90 81       	ld	r25, Z
 180:	91 60       	ori	r25, 0x01	; 1
 182:	90 83       	st	Z, r25
   LCD_RW_0;         //쓰기 모드 설정
 184:	90 81       	ld	r25, Z
 186:	9d 7f       	andi	r25, 0xFD	; 253
 188:	90 83       	st	Z, r25
   PORTC=buf;         //문자 출력
 18a:	85 bb       	out	0x15, r24	; 21
   E_Pulse();         //펄스 생성
 18c:	0e 94 8b 00 	call	0x116	; 0x116 <E_Pulse>
}
 190:	08 95       	ret

00000192 <LCD_Disp>:

void LCD_Disp(char x,char y)
{
   LCD_RS_0;         //명령 모드 설정
 192:	90 91 65 00 	lds	r25, 0x0065
 196:	9e 7f       	andi	r25, 0xFE	; 254
 198:	90 93 65 00 	sts	0x0065, r25
   LCD_RW_0;         //쓰기 모드 설정
 19c:	90 91 65 00 	lds	r25, 0x0065
 1a0:	9d 7f       	andi	r25, 0xFD	; 253
 1a2:	90 93 65 00 	sts	0x0065, r25

   if(y==0)
 1a6:	66 23       	and	r22, r22
 1a8:	11 f4       	brne	.+4      	; 0x1ae <LCD_Disp+0x1c>
      PORTC=x+0x80;   //1번째 행
 1aa:	80 58       	subi	r24, 0x80	; 128
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <LCD_Disp+0x22>
   else if(y==1)
 1ae:	61 30       	cpi	r22, 0x01	; 1
 1b0:	11 f4       	brne	.+4      	; 0x1b6 <LCD_Disp+0x24>
      PORTC=x+0xc0;   //2번째 행
 1b2:	80 54       	subi	r24, 0x40	; 64
 1b4:	85 bb       	out	0x15, r24	; 21
   E_Pulse();
 1b6:	0e 94 8b 00 	call	0x116	; 0x116 <E_Pulse>
}
 1ba:	08 95       	ret

000001bc <LCD_Write>:

void LCD_Write(char x, char y, char *str)
{
 1bc:	ef 92       	push	r14
 1be:	ff 92       	push	r15
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	df 93       	push	r29
 1c6:	cf 93       	push	r28
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <LCD_Write+0xe>
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
   LCD_Disp(x,y);      //x열, y행으로 이동
 1ce:	49 83       	std	Y+1, r20	; 0x01
 1d0:	5a 83       	std	Y+2, r21	; 0x02
 1d2:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Disp>
 1d6:	49 81       	ldd	r20, Y+1	; 0x01
 1d8:	5a 81       	ldd	r21, Y+2	; 0x02
 1da:	8a 01       	movw	r16, r20
   while(*str)
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <LCD_Write+0x26>
   Write_Char(*str++);   //문자 출력
 1de:	0e 94 bd 00 	call	0x17a	; 0x17a <Write_Char>
}

void LCD_Write(char x, char y, char *str)
{
   LCD_Disp(x,y);      //x열, y행으로 이동
   while(*str)
 1e2:	f8 01       	movw	r30, r16
 1e4:	81 91       	ld	r24, Z+
 1e6:	8f 01       	movw	r16, r30
 1e8:	88 23       	and	r24, r24
 1ea:	c9 f7       	brne	.-14     	; 0x1de <LCD_Write+0x22>
   Write_Char(*str++);   //문자 출력
}
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	cf 91       	pop	r28
 1f2:	df 91       	pop	r29
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	08 95       	ret

000001fe <LCD_cmd>:

void LCD_cmd(unsigned char cmd)
{
   LCD_RS_0;         //명령
 1fe:	e5 e6       	ldi	r30, 0x65	; 101
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	90 81       	ld	r25, Z
 204:	9e 7f       	andi	r25, 0xFE	; 254
 206:	90 83       	st	Z, r25
   LCD_RW_0;         //쓰기
 208:	90 81       	ld	r25, Z
 20a:	9d 7f       	andi	r25, 0xFD	; 253
 20c:	90 83       	st	Z, r25
   PORTC=cmd;         //명령코드
 20e:	85 bb       	out	0x15, r24	; 21
   E_Pulse();         //펄스
 210:	0e 94 8b 00 	call	0x116	; 0x116 <E_Pulse>
   msDelay(1);      //지연
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 76 00 	call	0xec	; 0xec <msDelay>
}
 21c:	08 95       	ret

0000021e <initADC>:



void initADC(void)
{
   ADMUX = 0x43;   //기준전압; 외부 캐퍼시터 가진AVcc(AREF 핀)
 21e:	83 e4       	ldi	r24, 0x43	; 67
 220:	87 b9       	out	0x07, r24	; 7
               //AC 변환 데이터 정렬; 오른쪽 정렬
               //AD 변환 채널 선택; PortF 0 핀

   ADCSRA= 0xc8;   //ADC 인에이블, ADC 변환 시작, ADC인터럽트 인에이블
 222:	88 ec       	ldi	r24, 0xC8	; 200
 224:	86 b9       	out	0x06, r24	; 6
               //ADC 클록 설정; XTAL의1/2(8MHz)

   DDRF = 0xf0;   //PortF[3..0] 입력으로 설정, PortF[7..4] 출력으로 설정
 226:	80 ef       	ldi	r24, 0xF0	; 240
 228:	80 93 61 00 	sts	0x0061, r24
   //DIDR0 = 0x0f;   //디지털 입력 불가 PortF[3..0]
}
 22c:	08 95       	ret

0000022e <__vector_21>:

SIGNAL(ADC_vect)
   {
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
      ADdata=ADC;      //AD 변환 데이터를 ADdata 에 저장
 23c:	84 b1       	in	r24, 0x04	; 4
 23e:	95 b1       	in	r25, 0x05	; 5
 240:	90 93 3b 01 	sts	0x013B, r25
 244:	80 93 3a 01 	sts	0x013A, r24
      ADCSRA = 0xc8;   //ADC 인에이블, ADC 변환 시작, ADC인터럽트 인에이블
 248:	88 ec       	ldi	r24, 0xC8	; 200
 24a:	86 b9       	out	0x06, r24	; 6
   }
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <ADCLCD>:

void ADCLCD(void)
{
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
   unsigned int Buff;
   unsigned char AD1000, AD100, AD10, AD1;

   ADVoltage= ADdata*50/1023;         //AD 변환 데이터를 전압으로 변환
 266:	20 91 3a 01 	lds	r18, 0x013A
 26a:	30 91 3b 01 	lds	r19, 0x013B
 26e:	42 e3       	ldi	r20, 0x32	; 50
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	24 9f       	mul	r18, r20
 274:	c0 01       	movw	r24, r0
 276:	25 9f       	mul	r18, r21
 278:	90 0d       	add	r25, r0
 27a:	34 9f       	mul	r19, r20
 27c:	90 0d       	add	r25, r0
 27e:	11 24       	eor	r1, r1
 280:	6f ef       	ldi	r22, 0xFF	; 255
 282:	73 e0       	ldi	r23, 0x03	; 3
 284:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__udivmodhi4>
 288:	70 93 3d 01 	sts	0x013D, r23
 28c:	60 93 3c 01 	sts	0x013C, r22

   AD1000= ADdata/ 1000| 0x30;      //AD 변환 데이터 1000자리값 ASCII 코드화
   Buff = ADdata% 1000;
 290:	c9 01       	movw	r24, r18
 292:	68 ee       	ldi	r22, 0xE8	; 232
 294:	73 e0       	ldi	r23, 0x03	; 3
 296:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__udivmodhi4>
 29a:	f6 2e       	mov	r15, r22
   AD100 = Buff / 100 | 0x30;         //AD 변환 데이터 100자리값 ASCII 코드화
   Buff = Buff % 100;
 29c:	64 e6       	ldi	r22, 0x64	; 100
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__udivmodhi4>
 2a4:	e6 2e       	mov	r14, r22
 2a6:	8c 01       	movw	r16, r24
   AD10 = Buff / 10 | 0x30;         //AD 변환 데이터 10자리값 ASCII 코드화
   AD1 = Buff % 10 | 0x30;               //AD 변환 데이터 1자리값 ASCII 코드화

   LCD_Disp(10,1);                  //LCD 두번째 줄에 AD 변환 데이터 표시
 2a8:	8a e0       	ldi	r24, 0x0A	; 10
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Disp>
   Write_Char(AD1000);
 2b0:	8f 2d       	mov	r24, r15
 2b2:	80 63       	ori	r24, 0x30	; 48
 2b4:	0e 94 bd 00 	call	0x17a	; 0x17a <Write_Char>
   LCD_Disp(11,1);
 2b8:	8b e0       	ldi	r24, 0x0B	; 11
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Disp>
   Write_Char(AD100);
 2c0:	8e 2d       	mov	r24, r14
 2c2:	80 63       	ori	r24, 0x30	; 48
 2c4:	0e 94 bd 00 	call	0x17a	; 0x17a <Write_Char>
   LCD_Disp(12,1);
 2c8:	8c e0       	ldi	r24, 0x0C	; 12
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Disp>

   AD1000= ADdata/ 1000| 0x30;      //AD 변환 데이터 1000자리값 ASCII 코드화
   Buff = ADdata% 1000;
   AD100 = Buff / 100 | 0x30;         //AD 변환 데이터 100자리값 ASCII 코드화
   Buff = Buff % 100;
   AD10 = Buff / 10 | 0x30;         //AD 변환 데이터 10자리값 ASCII 코드화
 2d0:	ca e0       	ldi	r28, 0x0A	; 10
 2d2:	d0 e0       	ldi	r29, 0x00	; 0
 2d4:	c8 01       	movw	r24, r16
 2d6:	be 01       	movw	r22, r28
 2d8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__udivmodhi4>
 2dc:	08 2f       	mov	r16, r24
   LCD_Disp(10,1);                  //LCD 두번째 줄에 AD 변환 데이터 표시
   Write_Char(AD1000);
   LCD_Disp(11,1);
   Write_Char(AD100);
   LCD_Disp(12,1);
   Write_Char(AD10);
 2de:	86 2f       	mov	r24, r22
 2e0:	80 63       	ori	r24, 0x30	; 48
 2e2:	0e 94 bd 00 	call	0x17a	; 0x17a <Write_Char>
   LCD_Disp(13,1);
 2e6:	8d e0       	ldi	r24, 0x0D	; 13
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Disp>
   Write_Char(AD1);
 2ee:	80 2f       	mov	r24, r16
 2f0:	80 63       	ori	r24, 0x30	; 48
 2f2:	0e 94 bd 00 	call	0x17a	; 0x17a <Write_Char>

   AD10= ADVoltage / 10 | 0x30;       //전압 10자리값 ASCII 코드화
 2f6:	00 91 3c 01 	lds	r16, 0x013C
 2fa:	10 91 3d 01 	lds	r17, 0x013D
   AD1= ADVoltage % 10 | 0x30;       //전압 1자리값 ASCII 코드화

   LCD_Disp(10,0);                  // LCD 첫번째 줄에 전압으로 표시
 2fe:	8a e0       	ldi	r24, 0x0A	; 10
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Disp>
   LCD_Disp(12,1);
   Write_Char(AD10);
   LCD_Disp(13,1);
   Write_Char(AD1);

   AD10= ADVoltage / 10 | 0x30;       //전압 10자리값 ASCII 코드화
 306:	c8 01       	movw	r24, r16
 308:	be 01       	movw	r22, r28
 30a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__udivmodhi4>
 30e:	08 2f       	mov	r16, r24
   AD1= ADVoltage % 10 | 0x30;       //전압 1자리값 ASCII 코드화

   LCD_Disp(10,0);                  // LCD 첫번째 줄에 전압으로 표시
   Write_Char(AD10);               // 전압 1자리값
 310:	86 2f       	mov	r24, r22
 312:	80 63       	ori	r24, 0x30	; 48
 314:	0e 94 bd 00 	call	0x17a	; 0x17a <Write_Char>
   LCD_Write(11,0,".");            // 소수점 포시
 318:	8b e0       	ldi	r24, 0x0B	; 11
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	51 e0       	ldi	r21, 0x01	; 1
 320:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_Write>
   LCD_Disp(12,0);
 324:	8c e0       	ldi	r24, 0x0C	; 12
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Disp>
   Write_Char(AD1);               // 소수점 이하 첫번째 값 표시
 32c:	80 2f       	mov	r24, r16
 32e:	80 63       	ori	r24, 0x30	; 48
 330:	0e 94 bd 00 	call	0x17a	; 0x17a <Write_Char>
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	08 95       	ret

00000342 <init_Port>:

void init_Port(void)
{
   DDRC = 0xff;
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	84 bb       	out	0x14, r24	; 20
  // PORTC = 0xff;
   DDRG = 0xff;
 346:	80 93 64 00 	sts	0x0064, r24
   //DDRE = 0xef;
   //PORTE = 0x10;
   DDRF = 0xf0;
 34a:	80 ef       	ldi	r24, 0xF0	; 240
 34c:	80 93 61 00 	sts	0x0061, r24
}
 350:	08 95       	ret

00000352 <main>:

int main(void)
{
   init_Port();                     //입출력 포트 초기화
 352:	0e 94 a1 01 	call	0x342	; 0x342 <init_Port>
      initLCD();                  //LCD 초기화
 356:	0e 94 9c 00 	call	0x138	; 0x138 <initLCD>
      initADC();                  //AD 변환 초기화
 35a:	0e 94 0f 01 	call	0x21e	; 0x21e <initADC>

      sei();                     //INT 인에이블 clear = 작동안됨
 35e:	78 94       	sei

      LCD_cmd(0x01);               //LCD 화면 지우기
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_cmd>
      msDelay(50);               //지연
 366:	82 e3       	ldi	r24, 0x32	; 50
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 76 00 	call	0xec	; 0xec <msDelay>

      LCD_Write(0,0, table1);         //초기 글자 출력
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	4a e1       	ldi	r20, 0x1A	; 26
 374:	51 e0       	ldi	r21, 0x01	; 1
 376:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_Write>
      LCD_Write(0,1, table2);
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	4a e2       	ldi	r20, 0x2A	; 42
 380:	51 e0       	ldi	r21, 0x01	; 1
 382:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_Write>
      msDelay(200);
 386:	88 ec       	ldi	r24, 0xC8	; 200
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 76 00 	call	0xec	; 0xec <msDelay>

      LCD_cmd(0x01);               //LCD 화면 지우기
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_cmd>
      msDelay(100);
 394:	84 e6       	ldi	r24, 0x64	; 100
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 76 00 	call	0xec	; 0xec <msDelay>

      LCD_Write(0,0,"Voltage :   V");//전압 표시
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	42 e0       	ldi	r20, 0x02	; 2
 3a2:	51 e0       	ldi	r21, 0x01	; 1
 3a4:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_Write>
      LCD_Write(0,1, "ADC Data:");   //AD 변환 데이터 표시
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	40 e1       	ldi	r20, 0x10	; 16
 3ae:	51 e0       	ldi	r21, 0x01	; 1
 3b0:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_Write>
      while(1)
      {
         ADCLCD();               //AD 변환 데이터와 전압값 LCD에 표시
 3b4:	0e 94 2d 01 	call	0x25a	; 0x25a <ADCLCD>
 3b8:	fd cf       	rjmp	.-6      	; 0x3b4 <main+0x62>

000003ba <__udivmodhi4>:
 3ba:	aa 1b       	sub	r26, r26
 3bc:	bb 1b       	sub	r27, r27
 3be:	51 e1       	ldi	r21, 0x11	; 17
 3c0:	07 c0       	rjmp	.+14     	; 0x3d0 <__udivmodhi4_ep>

000003c2 <__udivmodhi4_loop>:
 3c2:	aa 1f       	adc	r26, r26
 3c4:	bb 1f       	adc	r27, r27
 3c6:	a6 17       	cp	r26, r22
 3c8:	b7 07       	cpc	r27, r23
 3ca:	10 f0       	brcs	.+4      	; 0x3d0 <__udivmodhi4_ep>
 3cc:	a6 1b       	sub	r26, r22
 3ce:	b7 0b       	sbc	r27, r23

000003d0 <__udivmodhi4_ep>:
 3d0:	88 1f       	adc	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	5a 95       	dec	r21
 3d6:	a9 f7       	brne	.-22     	; 0x3c2 <__udivmodhi4_loop>
 3d8:	80 95       	com	r24
 3da:	90 95       	com	r25
 3dc:	bc 01       	movw	r22, r24
 3de:	cd 01       	movw	r24, r26
 3e0:	08 95       	ret

000003e2 <_exit>:
 3e2:	f8 94       	cli

000003e4 <__stop_program>:
 3e4:	ff cf       	rjmp	.-2      	; 0x3e4 <__stop_program>
