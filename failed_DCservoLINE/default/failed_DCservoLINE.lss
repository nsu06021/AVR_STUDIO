
failed_DCservoLINE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000102  00800100  00800100  000003e0  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000009b  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001e8  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000f0  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ab  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000fd  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b8  00000000  00000000  0000140d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000002b  00000000  00000000  000014c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_21>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 99 01 	call	0x332	; 0x332 <main>
  ac:	0c 94 b4 01 	jmp	0x368	; 0x368 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <us_delay>:

void us_delay(unsigned int us)
{
   unsigned int i;

   for(i=0; i<us; i++) {
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	08 c0       	rjmp	.+16     	; 0xca <us_delay+0x16>
      asm("PUSH R0");
  ba:	0f 92       	push	r0
      asm("POP R0");
  bc:	0f 90       	pop	r0
      asm("PUSH R0");
  be:	0f 92       	push	r0
      asm("POP R0");
  c0:	0f 90       	pop	r0
      asm("PUSH R0");
  c2:	0f 92       	push	r0
      asm("POP R0");
  c4:	0f 90       	pop	r0

void us_delay(unsigned int us)
{
   unsigned int i;

   for(i=0; i<us; i++) {
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	28 17       	cp	r18, r24
  cc:	39 07       	cpc	r19, r25
  ce:	a8 f3       	brcs	.-22     	; 0xba <us_delay+0x6>
      asm("PUSH R0");
      asm("POP R0");
      asm("PUSH R0");
      asm("POP R0");
   }
}
  d0:	08 95       	ret

000000d2 <ms_delay>:

void ms_delay(unsigned int ms)
{
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	8c 01       	movw	r16, r24
   unsigned int i;

   for(i=0;i<ms;i++)
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	05 c0       	rjmp	.+10     	; 0xec <ms_delay+0x1a>
      us_delay(1000);
  e2:	88 ee       	ldi	r24, 0xE8	; 232
  e4:	93 e0       	ldi	r25, 0x03	; 3
  e6:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>

void ms_delay(unsigned int ms)
{
   unsigned int i;

   for(i=0;i<ms;i++)
  ea:	21 96       	adiw	r28, 0x01	; 1
  ec:	c0 17       	cp	r28, r16
  ee:	d1 07       	cpc	r29, r17
  f0:	c0 f3       	brcs	.-16     	; 0xe2 <ms_delay+0x10>
      us_delay(1000);
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	1f 91       	pop	r17
  f8:	0f 91       	pop	r16
  fa:	08 95       	ret

000000fc <initADC>:

void initADC(void)
{
   ADMUX = 0x42;   //기준전압; 외부 캐퍼시터 가진AVcc(AREF 핀)
  fc:	82 e4       	ldi	r24, 0x42	; 66
  fe:	87 b9       	out	0x07, r24	; 7
               //AC 변환 데이터 정렬; 오른쪽 정렬
               //AD 변환 채널 선택; PortF 0 핀

   ADCSRA= 0xc8;   //ADC 인에이블, ADC 변환 시작, ADC인터럽트 인에이블
 100:	88 ec       	ldi	r24, 0xC8	; 200
 102:	86 b9       	out	0x06, r24	; 6
               //ADC 클록 설정; XTAL의1/2(8MHz)
}
 104:	08 95       	ret

00000106 <__vector_21>:

SIGNAL(ADC_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
   ADdata=ADC;      //AD 변환 데이터를 ADdata 에 저장
 114:	84 b1       	in	r24, 0x04	; 4
 116:	95 b1       	in	r25, 0x05	; 5
 118:	90 93 01 01 	sts	0x0101, r25
 11c:	80 93 00 01 	sts	0x0100, r24
     
   ADCSRA = 0xc8;   //ADC 인에이블, ADC 변환 시작, ADC인터럽트 인에이블
 120:	88 ec       	ldi	r24, 0xC8	; 200
 122:	86 b9       	out	0x06, r24	; 6
}
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <Refresh>:

void Refresh()
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
   int i;

   SI_1;
 136:	80 91 62 00 	lds	r24, 0x0062
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	80 93 62 00 	sts	0x0062, r24
   us_delay(SI_WIDTH);
 140:	88 ee       	ldi	r24, 0xE8	; 232
 142:	93 e0       	ldi	r25, 0x03	; 3
 144:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
   CLK_1;
 148:	80 91 62 00 	lds	r24, 0x0062
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	80 93 62 00 	sts	0x0062, r24
   us_delay(SI_WIDTH);
 152:	88 ee       	ldi	r24, 0xE8	; 232
 154:	93 e0       	ldi	r25, 0x03	; 3
 156:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
   SI_0;
 15a:	80 91 62 00 	lds	r24, 0x0062
 15e:	8d 7f       	andi	r24, 0xFD	; 253
 160:	80 93 62 00 	sts	0x0062, r24
   us_delay(SI_WIDTH);
 164:	88 ee       	ldi	r24, 0xE8	; 232
 166:	93 e0       	ldi	r25, 0x03	; 3
 168:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
   CLK_0;
 16c:	80 91 62 00 	lds	r24, 0x0062
 170:	8e 7f       	andi	r24, 0xFE	; 254
 172:	80 93 62 00 	sts	0x0062, r24
 176:	c6 e9       	ldi	r28, 0x96	; 150
 178:	d0 e0       	ldi	r29, 0x00	; 0

   for(i=0;i<150;i++){
      CLK_1;
 17a:	80 91 62 00 	lds	r24, 0x0062
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	80 93 62 00 	sts	0x0062, r24
      us_delay(CLK_WIDTH );
 184:	8a e0       	ldi	r24, 0x0A	; 10
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
      CLK_0;
 18c:	80 91 62 00 	lds	r24, 0x0062
 190:	8e 7f       	andi	r24, 0xFE	; 254
 192:	80 93 62 00 	sts	0x0062, r24
      us_delay(CLK_WIDTH );
 196:	8a e0       	ldi	r24, 0x0A	; 10
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
 19e:	21 97       	sbiw	r28, 0x01	; 1
   us_delay(SI_WIDTH);
   SI_0;
   us_delay(SI_WIDTH);
   CLK_0;

   for(i=0;i<150;i++){
 1a0:	61 f7       	brne	.-40     	; 0x17a <Refresh+0x48>
      CLK_1;
      us_delay(CLK_WIDTH );
      CLK_0;
      us_delay(CLK_WIDTH );
   }
   SI_1;
 1a2:	80 91 62 00 	lds	r24, 0x0062
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	80 93 62 00 	sts	0x0062, r24
   us_delay(SI_WIDTH);
 1ac:	88 ee       	ldi	r24, 0xE8	; 232
 1ae:	93 e0       	ldi	r25, 0x03	; 3
 1b0:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <init_TIMER1>:

void init_TIMER1(void)
{
   TCCR1A = 0xA2;   //0x22
 1ba:	82 ea       	ldi	r24, 0xA2	; 162
 1bc:	8f bd       	out	0x2f, r24	; 47
   TCCR1B = 0x1A;
 1be:	8a e1       	ldi	r24, 0x1A	; 26
 1c0:	8e bd       	out	0x2e, r24	; 46
   TCCR1C = 0; 
 1c2:	10 92 7a 00 	sts	0x007A, r1
   TCNT1 = 0;
 1c6:	1d bc       	out	0x2d, r1	; 45
 1c8:	1c bc       	out	0x2c, r1	; 44
   OCR1A = 00000;  //75%~
 1ca:	1b bc       	out	0x2b, r1	; 43
 1cc:	1a bc       	out	0x2a, r1	; 42
   OCR1B = 2200;   //2800(L)~2200(C)~1800(R)
 1ce:	88 e9       	ldi	r24, 0x98	; 152
 1d0:	98 e0       	ldi	r25, 0x08	; 8
 1d2:	99 bd       	out	0x29, r25	; 41
 1d4:	88 bd       	out	0x28, r24	; 40
   ICR1 = 40000;
 1d6:	80 e4       	ldi	r24, 0x40	; 64
 1d8:	9c e9       	ldi	r25, 0x9C	; 156
 1da:	97 bd       	out	0x27, r25	; 39
 1dc:	86 bd       	out	0x26, r24	; 38
   TIFR = 0x00;
 1de:	16 be       	out	0x36, r1	; 54
   TIMSK = 0x00;
 1e0:	17 be       	out	0x37, r1	; 55
   ETIMSK = 0x00;
 1e2:	10 92 7d 00 	sts	0x007D, r1
   ETIFR = 0x00;
 1e6:	10 92 7c 00 	sts	0x007C, r1
}
 1ea:	08 95       	ret

000001ec <ConShot>:

void ConShot()
{
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
   int i;

    //msDelay(1000);

   SI_0;
 1f0:	80 91 62 00 	lds	r24, 0x0062
 1f4:	8d 7f       	andi	r24, 0xFD	; 253
 1f6:	80 93 62 00 	sts	0x0062, r24
   CLK_0;
 1fa:	80 91 62 00 	lds	r24, 0x0062
 1fe:	8e 7f       	andi	r24, 0xFE	; 254
 200:	80 93 62 00 	sts	0x0062, r24
   us_delay(SI_WIDTH);
 204:	88 ee       	ldi	r24, 0xE8	; 232
 206:	93 e0       	ldi	r25, 0x03	; 3
 208:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
   SI_1;
 20c:	80 91 62 00 	lds	r24, 0x0062
 210:	82 60       	ori	r24, 0x02	; 2
 212:	80 93 62 00 	sts	0x0062, r24
   us_delay(SI_WIDTH);
 216:	88 ee       	ldi	r24, 0xE8	; 232
 218:	93 e0       	ldi	r25, 0x03	; 3
 21a:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
   CLK_1;
 21e:	80 91 62 00 	lds	r24, 0x0062
 222:	81 60       	ori	r24, 0x01	; 1
 224:	80 93 62 00 	sts	0x0062, r24
   us_delay(CLK_WIDTH );
 228:	8a e0       	ldi	r24, 0x0A	; 10
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
   SI_0;
 230:	80 91 62 00 	lds	r24, 0x0062
 234:	8d 7f       	andi	r24, 0xFD	; 253
 236:	80 93 62 00 	sts	0x0062, r24
   us_delay(CLK_WIDTH );
 23a:	8a e0       	ldi	r24, 0x0A	; 10
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
   CLK_0;
 242:	80 91 62 00 	lds	r24, 0x0062
 246:	8e 7f       	andi	r24, 0xFE	; 254
 248:	80 93 62 00 	sts	0x0062, r24
 24c:	c2 e0       	ldi	r28, 0x02	; 2
 24e:	d1 e0       	ldi	r29, 0x01	; 1
   

   for(i=0;i<250;i++){
      CLK_1;
 250:	80 91 62 00 	lds	r24, 0x0062
 254:	81 60       	ori	r24, 0x01	; 1
 256:	80 93 62 00 	sts	0x0062, r24
      us_delay(CLK_WIDTH );
 25a:	8a e0       	ldi	r24, 0x0A	; 10
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
      CLK_0;
 262:	80 91 62 00 	lds	r24, 0x0062
 266:	8e 7f       	andi	r24, 0xFE	; 254
 268:	80 93 62 00 	sts	0x0062, r24
      us_delay(CLK_WIDTH );
 26c:	8a e0       	ldi	r24, 0x0A	; 10
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
      line[i] = ADdata;
 274:	80 91 00 01 	lds	r24, 0x0100
 278:	90 91 01 01 	lds	r25, 0x0101
 27c:	89 93       	st	Y+, r24
 27e:	99 93       	st	Y+, r25
   SI_0;
   us_delay(CLK_WIDTH );
   CLK_0;
   

   for(i=0;i<250;i++){
 280:	22 e0       	ldi	r18, 0x02	; 2
 282:	c6 3f       	cpi	r28, 0xF6	; 246
 284:	d2 07       	cpc	r29, r18
 286:	21 f7       	brne	.-56     	; 0x250 <ConShot+0x64>
      CLK_0;
      us_delay(CLK_WIDTH );
      line[i] = ADdata;
   }
   
   if((line[122]+line[123]+line[124]+line[125]+line[126])/5<500)
 288:	80 91 f8 01 	lds	r24, 0x01F8
 28c:	90 91 f9 01 	lds	r25, 0x01F9
 290:	20 91 f6 01 	lds	r18, 0x01F6
 294:	30 91 f7 01 	lds	r19, 0x01F7
 298:	82 0f       	add	r24, r18
 29a:	93 1f       	adc	r25, r19
 29c:	20 91 fa 01 	lds	r18, 0x01FA
 2a0:	30 91 fb 01 	lds	r19, 0x01FB
 2a4:	82 0f       	add	r24, r18
 2a6:	93 1f       	adc	r25, r19
 2a8:	20 91 fc 01 	lds	r18, 0x01FC
 2ac:	30 91 fd 01 	lds	r19, 0x01FD
 2b0:	82 0f       	add	r24, r18
 2b2:	93 1f       	adc	r25, r19
 2b4:	20 91 fe 01 	lds	r18, 0x01FE
 2b8:	30 91 ff 01 	lds	r19, 0x01FF
 2bc:	82 0f       	add	r24, r18
 2be:	93 1f       	adc	r25, r19
 2c0:	29 e0       	ldi	r18, 0x09	; 9
 2c2:	84 3c       	cpi	r24, 0xC4	; 196
 2c4:	92 07       	cpc	r25, r18
 2c6:	20 f4       	brcc	.+8      	; 0x2d0 <ConShot+0xe4>
   {
      OCR1B = 2800;
 2c8:	80 ef       	ldi	r24, 0xF0	; 240
 2ca:	9a e0       	ldi	r25, 0x0A	; 10
 2cc:	99 bd       	out	0x29, r25	; 41
 2ce:	88 bd       	out	0x28, r24	; 40
   }
   if((line[1]+line[2]+line[3]+line[4]+line[5])/5<500)
 2d0:	80 91 06 01 	lds	r24, 0x0106
 2d4:	90 91 07 01 	lds	r25, 0x0107
 2d8:	20 91 04 01 	lds	r18, 0x0104
 2dc:	30 91 05 01 	lds	r19, 0x0105
 2e0:	82 0f       	add	r24, r18
 2e2:	93 1f       	adc	r25, r19
 2e4:	20 91 08 01 	lds	r18, 0x0108
 2e8:	30 91 09 01 	lds	r19, 0x0109
 2ec:	82 0f       	add	r24, r18
 2ee:	93 1f       	adc	r25, r19
 2f0:	20 91 0a 01 	lds	r18, 0x010A
 2f4:	30 91 0b 01 	lds	r19, 0x010B
 2f8:	82 0f       	add	r24, r18
 2fa:	93 1f       	adc	r25, r19
 2fc:	20 91 0c 01 	lds	r18, 0x010C
 300:	30 91 0d 01 	lds	r19, 0x010D
 304:	82 0f       	add	r24, r18
 306:	93 1f       	adc	r25, r19
 308:	29 e0       	ldi	r18, 0x09	; 9
 30a:	84 3c       	cpi	r24, 0xC4	; 196
 30c:	92 07       	cpc	r25, r18
 30e:	20 f4       	brcc	.+8      	; 0x318 <ConShot+0x12c>
   {
      OCR1B = 1800;
 310:	88 e0       	ldi	r24, 0x08	; 8
 312:	97 e0       	ldi	r25, 0x07	; 7
 314:	99 bd       	out	0x29, r25	; 41
 316:	88 bd       	out	0x28, r24	; 40
   }
  
   
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <init_Port>:

void init_Port(void)
{
   DDRB = 0x38;
 31e:	88 e3       	ldi	r24, 0x38	; 56
 320:	87 bb       	out	0x17, r24	; 23
   PORTB = 0x30;
 322:	80 e3       	ldi	r24, 0x30	; 48
 324:	88 bb       	out	0x18, r24	; 24
   DDRB = 0x40;
 326:	80 e4       	ldi	r24, 0x40	; 64
 328:	87 bb       	out	0x17, r24	; 23
   DDRF = 0xf3;
 32a:	83 ef       	ldi	r24, 0xF3	; 243
 32c:	80 93 61 00 	sts	0x0061, r24
}
 330:	08 95       	ret

00000332 <main>:

int main(void)
{
   init_Port();
 332:	0e 94 8f 01 	call	0x31e	; 0x31e <init_Port>
   //ms_delay(100);
   init_TIMER1();
 336:	0e 94 dd 00 	call	0x1ba	; 0x1ba <init_TIMER1>
   initADC();
 33a:	0e 94 7e 00 	call	0xfc	; 0xfc <initADC>

   CLK_0;
 33e:	80 91 62 00 	lds	r24, 0x0062
 342:	8e 7f       	andi	r24, 0xFE	; 254
 344:	80 93 62 00 	sts	0x0062, r24
   SI_0;
 348:	80 91 62 00 	lds	r24, 0x0062
 34c:	8d 7f       	andi	r24, 0xFD	; 253
 34e:	80 93 62 00 	sts	0x0062, r24
   Refresh();
 352:	0e 94 99 00 	call	0x132	; 0x132 <Refresh>
   SI_0;
 356:	80 91 62 00 	lds	r24, 0x0062
 35a:	8d 7f       	andi	r24, 0xFD	; 253
 35c:	80 93 62 00 	sts	0x0062, r24
     
   sei();                     //INT 인에이블 clear = 작동안됨
 360:	78 94       	sei

  // ms_delay(100);

   while(1)
   {
       ConShot();
 362:	0e 94 f6 00 	call	0x1ec	; 0x1ec <ConShot>
 366:	fd cf       	rjmp	.-6      	; 0x362 <main+0x30>

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
