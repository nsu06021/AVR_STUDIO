
DC_red1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000043c  000004d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080013a  0080013a  0000050a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000fc  00000000  00000000  00000c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000333  00000000  00000000  00000d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000100  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004e0  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000f0  00000000  00000000  0000168c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000143  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001c0  00000000  00000000  000018bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000002b  00000000  00000000  00001a7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_21>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e3       	ldi	r30, 0x3C	; 60
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 33       	cpi	r26, 0x3A	; 58
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	aa e3       	ldi	r26, 0x3A	; 58
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 33       	cpi	r26, 0x3E	; 62
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 c0 01 	call	0x380	; 0x380 <main>
  c6:	0c 94 1c 02 	jmp	0x438	; 0x438 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <usDelay>:

void usDelay(unsigned int us)
{
   unsigned int i;

   for(i=0; i<us; i++) {
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	08 c0       	rjmp	.+16     	; 0xe4 <usDelay+0x16>
      asm("PUSH R0");
  d4:	0f 92       	push	r0
      asm("POP R0");
  d6:	0f 90       	pop	r0
      asm("PUSH R0");
  d8:	0f 92       	push	r0
      asm("POP R0");
  da:	0f 90       	pop	r0
      asm("PUSH R0");
  dc:	0f 92       	push	r0
      asm("POP R0");
  de:	0f 90       	pop	r0

void usDelay(unsigned int us)
{
   unsigned int i;

   for(i=0; i<us; i++) {
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	28 17       	cp	r18, r24
  e6:	39 07       	cpc	r19, r25
  e8:	a8 f3       	brcs	.-22     	; 0xd4 <usDelay+0x6>
      asm("PUSH R0");
      asm("POP R0");
      asm("PUSH R0");
      asm("POP R0");
   }
}
  ea:	08 95       	ret

000000ec <msDelay>:

void msDelay(unsigned int ms)
{
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	8c 01       	movw	r16, r24
   unsigned int i;

   for(i=0;i<ms;i++)
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	05 c0       	rjmp	.+10     	; 0x106 <msDelay+0x1a>
      usDelay(1000);
  fc:	88 ee       	ldi	r24, 0xE8	; 232
  fe:	93 e0       	ldi	r25, 0x03	; 3
 100:	0e 94 67 00 	call	0xce	; 0xce <usDelay>

void msDelay(unsigned int ms)
{
   unsigned int i;

   for(i=0;i<ms;i++)
 104:	21 96       	adiw	r28, 0x01	; 1
 106:	c0 17       	cp	r28, r16
 108:	d1 07       	cpc	r29, r17
 10a:	c0 f3       	brcs	.-16     	; 0xfc <msDelay+0x10>
      usDelay(1000);
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <init_TIMER1_DC>:

void init_TIMER1_DC(void)
{
   TCCR1A = 0x82;
 116:	82 e8       	ldi	r24, 0x82	; 130
 118:	8f bd       	out	0x2f, r24	; 47
   TCCR1B = 0x1A;
 11a:	8a e1       	ldi	r24, 0x1A	; 26
 11c:	8e bd       	out	0x2e, r24	; 46
   TCCR1C = 0; 
 11e:	10 92 7a 00 	sts	0x007A, r1
   TCNT1 = 0;
 122:	1d bc       	out	0x2d, r1	; 45
 124:	1c bc       	out	0x2c, r1	; 44
   OCR1A = 30000;//3400~2600~   4만
 126:	80 e3       	ldi	r24, 0x30	; 48
 128:	95 e7       	ldi	r25, 0x75	; 117
 12a:	9b bd       	out	0x2b, r25	; 43
 12c:	8a bd       	out	0x2a, r24	; 42
   ICR1 = 40000;
 12e:	80 e4       	ldi	r24, 0x40	; 64
 130:	9c e9       	ldi	r25, 0x9C	; 156
 132:	97 bd       	out	0x27, r25	; 39
 134:	86 bd       	out	0x26, r24	; 38
   TIFR = 0x00;
 136:	16 be       	out	0x36, r1	; 54
   TIMSK = 0x00;
 138:	17 be       	out	0x37, r1	; 55
}
 13a:	08 95       	ret

0000013c <E_Pulse>:

void E_Pulse(void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
   EN_1;
 140:	c5 e6       	ldi	r28, 0x65	; 101
 142:	d0 e0       	ldi	r29, 0x00	; 0
 144:	88 81       	ld	r24, Y
 146:	84 60       	ori	r24, 0x04	; 4
 148:	88 83       	st	Y, r24

   usDelay(100);      //약 100usec 지연
 14a:	84 e6       	ldi	r24, 0x64	; 100
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 67 00 	call	0xce	; 0xce <usDelay>

   EN_0;
 152:	88 81       	ld	r24, Y
 154:	8b 7f       	andi	r24, 0xFB	; 251
 156:	88 83       	st	Y, r24
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <initLCD>:

void initLCD(void)
{
   msDelay(40);
 15e:	88 e2       	ldi	r24, 0x28	; 40
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 76 00 	call	0xec	; 0xec <msDelay>

   PORTC =0x38;      //Function Set
 166:	88 e3       	ldi	r24, 0x38	; 56
 168:	85 bb       	out	0x15, r24	; 21
   E_Pulse();
 16a:	0e 94 9e 00 	call	0x13c	; 0x13c <E_Pulse>
   usDelay(40);
 16e:	88 e2       	ldi	r24, 0x28	; 40
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 67 00 	call	0xce	; 0xce <usDelay>

   PORTC = 0x0c;      //DisPlay ON/OFF Control
 176:	8c e0       	ldi	r24, 0x0C	; 12
 178:	85 bb       	out	0x15, r24	; 21
   usDelay(40);
 17a:	88 e2       	ldi	r24, 0x28	; 40
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 67 00 	call	0xce	; 0xce <usDelay>
   E_Pulse();
 182:	0e 94 9e 00 	call	0x13c	; 0x13c <E_Pulse>

   PORTC =  0x01;      //Display Clear
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	85 bb       	out	0x15, r24	; 21
   msDelay(2);
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 76 00 	call	0xec	; 0xec <msDelay>
   E_Pulse();
 192:	0e 94 9e 00 	call	0x13c	; 0x13c <E_Pulse>

   PORTC = 0x06;      //Entry Mode Set
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	85 bb       	out	0x15, r24	; 21
   E_Pulse();
 19a:	0e 94 9e 00 	call	0x13c	; 0x13c <E_Pulse>
}
 19e:	08 95       	ret

000001a0 <Write_Char>:

void Write_Char(unsigned char buf)
{
   LCD_RS_1;         //문자 입출력 모드 설정
 1a0:	e5 e6       	ldi	r30, 0x65	; 101
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	90 81       	ld	r25, Z
 1a6:	91 60       	ori	r25, 0x01	; 1
 1a8:	90 83       	st	Z, r25
   LCD_RW_0;         //쓰기 모드 설정
 1aa:	90 81       	ld	r25, Z
 1ac:	9d 7f       	andi	r25, 0xFD	; 253
 1ae:	90 83       	st	Z, r25
   PORTC=buf;         //문자 출력
 1b0:	85 bb       	out	0x15, r24	; 21
   E_Pulse();         //펄스 생성
 1b2:	0e 94 9e 00 	call	0x13c	; 0x13c <E_Pulse>
}
 1b6:	08 95       	ret

000001b8 <LCD_Disp>:

void LCD_Disp(char x,char y)
{
   LCD_RS_0;         //명령 모드 설정
 1b8:	90 91 65 00 	lds	r25, 0x0065
 1bc:	9e 7f       	andi	r25, 0xFE	; 254
 1be:	90 93 65 00 	sts	0x0065, r25
   LCD_RW_0;         //쓰기 모드 설정
 1c2:	90 91 65 00 	lds	r25, 0x0065
 1c6:	9d 7f       	andi	r25, 0xFD	; 253
 1c8:	90 93 65 00 	sts	0x0065, r25

   if(y==0)
 1cc:	66 23       	and	r22, r22
 1ce:	11 f4       	brne	.+4      	; 0x1d4 <LCD_Disp+0x1c>
      PORTC=x+0x80;   //1번째 행
 1d0:	80 58       	subi	r24, 0x80	; 128
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <LCD_Disp+0x22>
   else if(y==1)
 1d4:	61 30       	cpi	r22, 0x01	; 1
 1d6:	11 f4       	brne	.+4      	; 0x1dc <LCD_Disp+0x24>
      PORTC=x+0xc0;   //2번째 행
 1d8:	80 54       	subi	r24, 0x40	; 64
 1da:	85 bb       	out	0x15, r24	; 21
   E_Pulse();
 1dc:	0e 94 9e 00 	call	0x13c	; 0x13c <E_Pulse>
}
 1e0:	08 95       	ret

000001e2 <LCD_Write>:

void LCD_Write(char x, char y, char *str)
{
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <LCD_Write+0xe>
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
   LCD_Disp(x,y);      //x열, y행으로 이동
 1f4:	49 83       	std	Y+1, r20	; 0x01
 1f6:	5a 83       	std	Y+2, r21	; 0x02
 1f8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Disp>
 1fc:	49 81       	ldd	r20, Y+1	; 0x01
 1fe:	5a 81       	ldd	r21, Y+2	; 0x02
 200:	8a 01       	movw	r16, r20
   while(*str)
 202:	02 c0       	rjmp	.+4      	; 0x208 <LCD_Write+0x26>
   Write_Char(*str++);   //문자 출력
 204:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Write_Char>
}

void LCD_Write(char x, char y, char *str)
{
   LCD_Disp(x,y);      //x열, y행으로 이동
   while(*str)
 208:	f8 01       	movw	r30, r16
 20a:	81 91       	ld	r24, Z+
 20c:	8f 01       	movw	r16, r30
 20e:	88 23       	and	r24, r24
 210:	c9 f7       	brne	.-14     	; 0x204 <LCD_Write+0x22>
   Write_Char(*str++);   //문자 출력
}
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	cf 91       	pop	r28
 218:	df 91       	pop	r29
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	08 95       	ret

00000224 <LCD_cmd>:

void LCD_cmd(unsigned char cmd)
{
   LCD_RS_0;         //명령
 224:	e5 e6       	ldi	r30, 0x65	; 101
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	90 81       	ld	r25, Z
 22a:	9e 7f       	andi	r25, 0xFE	; 254
 22c:	90 83       	st	Z, r25
   LCD_RW_0;         //쓰기
 22e:	90 81       	ld	r25, Z
 230:	9d 7f       	andi	r25, 0xFD	; 253
 232:	90 83       	st	Z, r25
   PORTC=cmd;         //명령코드
 234:	85 bb       	out	0x15, r24	; 21
   E_Pulse();         //펄스
 236:	0e 94 9e 00 	call	0x13c	; 0x13c <E_Pulse>
   msDelay(1);      //지연
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 76 00 	call	0xec	; 0xec <msDelay>
}
 242:	08 95       	ret

00000244 <initADC_red>:



void initADC_red(void)
{
   ADMUX = 0x43;   //기준전압; 외부 캐퍼시터 가진AVcc(AREF 핀)
 244:	83 e4       	ldi	r24, 0x43	; 67
 246:	87 b9       	out	0x07, r24	; 7
               //AC 변환 데이터 정렬; 오른쪽 정렬
               //AD 변환 채널 선택; PortF 0 핀

   ADCSRA= 0xc8;   //ADC 인에이블, ADC 변환 시작, ADC인터럽트 인에이블
 248:	88 ec       	ldi	r24, 0xC8	; 200
 24a:	86 b9       	out	0x06, r24	; 6
               //ADC 클록 설정; XTAL의1/2(8MHz)

   DDRF = 0xf0;   //PortF[3..0] 입력으로 설정, PortF[7..4] 출력으로 설정
 24c:	80 ef       	ldi	r24, 0xF0	; 240
 24e:	80 93 61 00 	sts	0x0061, r24
   //DIDR0 = 0x0f;   //디지털 입력 불가 PortF[3..0]
}
 252:	08 95       	ret

00000254 <__vector_21>:

SIGNAL(ADC_vect)
   {
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
      ADdata=ADC;      //AD 변환 데이터를 ADdata 에 저장
 262:	84 b1       	in	r24, 0x04	; 4
 264:	95 b1       	in	r25, 0x05	; 5
 266:	90 93 3b 01 	sts	0x013B, r25
 26a:	80 93 3a 01 	sts	0x013A, r24
      ADCSRA = 0xc8;   //ADC 인에이블, ADC 변환 시작, ADC인터럽트 인에이블
 26e:	88 ec       	ldi	r24, 0xC8	; 200
 270:	86 b9       	out	0x06, r24	; 6
   }
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <ADCLCD>:

void ADCLCD(void)
{
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
   unsigned int Buff;
   unsigned char AD1000, AD100, AD10, AD1;

   ADVoltage= ADdata*50/1023;         //AD 변환 데이터를 전압으로 변환
 28c:	20 91 3a 01 	lds	r18, 0x013A
 290:	30 91 3b 01 	lds	r19, 0x013B
 294:	42 e3       	ldi	r20, 0x32	; 50
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	24 9f       	mul	r18, r20
 29a:	c0 01       	movw	r24, r0
 29c:	25 9f       	mul	r18, r21
 29e:	90 0d       	add	r25, r0
 2a0:	34 9f       	mul	r19, r20
 2a2:	90 0d       	add	r25, r0
 2a4:	11 24       	eor	r1, r1
 2a6:	6f ef       	ldi	r22, 0xFF	; 255
 2a8:	73 e0       	ldi	r23, 0x03	; 3
 2aa:	0e 94 08 02 	call	0x410	; 0x410 <__udivmodhi4>
 2ae:	70 93 3d 01 	sts	0x013D, r23
 2b2:	60 93 3c 01 	sts	0x013C, r22

   AD1000= ADdata/ 1000| 0x30;      //AD 변환 데이터 1000자리값 ASCII 코드화
   Buff = ADdata% 1000;
 2b6:	c9 01       	movw	r24, r18
 2b8:	68 ee       	ldi	r22, 0xE8	; 232
 2ba:	73 e0       	ldi	r23, 0x03	; 3
 2bc:	0e 94 08 02 	call	0x410	; 0x410 <__udivmodhi4>
 2c0:	f6 2e       	mov	r15, r22
   AD100 = Buff / 100 | 0x30;         //AD 변환 데이터 100자리값 ASCII 코드화
   Buff = Buff % 100;
 2c2:	64 e6       	ldi	r22, 0x64	; 100
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	0e 94 08 02 	call	0x410	; 0x410 <__udivmodhi4>
 2ca:	e6 2e       	mov	r14, r22
 2cc:	8c 01       	movw	r16, r24
   AD10 = Buff / 10 | 0x30;         //AD 변환 데이터 10자리값 ASCII 코드화
   AD1 = Buff % 10 | 0x30;               //AD 변환 데이터 1자리값 ASCII 코드화

   LCD_Disp(10,1);                  //LCD 두번째 줄에 AD 변환 데이터 표시
 2ce:	8a e0       	ldi	r24, 0x0A	; 10
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Disp>
   Write_Char(AD1000);
 2d6:	8f 2d       	mov	r24, r15
 2d8:	80 63       	ori	r24, 0x30	; 48
 2da:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Write_Char>
   LCD_Disp(11,1);
 2de:	8b e0       	ldi	r24, 0x0B	; 11
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Disp>
   Write_Char(AD100);
 2e6:	8e 2d       	mov	r24, r14
 2e8:	80 63       	ori	r24, 0x30	; 48
 2ea:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Write_Char>
   LCD_Disp(12,1);
 2ee:	8c e0       	ldi	r24, 0x0C	; 12
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Disp>

   AD1000= ADdata/ 1000| 0x30;      //AD 변환 데이터 1000자리값 ASCII 코드화
   Buff = ADdata% 1000;
   AD100 = Buff / 100 | 0x30;         //AD 변환 데이터 100자리값 ASCII 코드화
   Buff = Buff % 100;
   AD10 = Buff / 10 | 0x30;         //AD 변환 데이터 10자리값 ASCII 코드화
 2f6:	ca e0       	ldi	r28, 0x0A	; 10
 2f8:	d0 e0       	ldi	r29, 0x00	; 0
 2fa:	c8 01       	movw	r24, r16
 2fc:	be 01       	movw	r22, r28
 2fe:	0e 94 08 02 	call	0x410	; 0x410 <__udivmodhi4>
 302:	08 2f       	mov	r16, r24
   LCD_Disp(10,1);                  //LCD 두번째 줄에 AD 변환 데이터 표시
   Write_Char(AD1000);
   LCD_Disp(11,1);
   Write_Char(AD100);
   LCD_Disp(12,1);
   Write_Char(AD10);
 304:	86 2f       	mov	r24, r22
 306:	80 63       	ori	r24, 0x30	; 48
 308:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Write_Char>
   LCD_Disp(13,1);
 30c:	8d e0       	ldi	r24, 0x0D	; 13
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Disp>
   Write_Char(AD1);
 314:	80 2f       	mov	r24, r16
 316:	80 63       	ori	r24, 0x30	; 48
 318:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Write_Char>

   AD10= ADVoltage / 10 | 0x30;       //전압 10자리값 ASCII 코드화
 31c:	00 91 3c 01 	lds	r16, 0x013C
 320:	10 91 3d 01 	lds	r17, 0x013D
   AD1= ADVoltage % 10 | 0x30;       //전압 1자리값 ASCII 코드화

   LCD_Disp(10,0);                  // LCD 첫번째 줄에 전압으로 표시
 324:	8a e0       	ldi	r24, 0x0A	; 10
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Disp>
   LCD_Disp(12,1);
   Write_Char(AD10);
   LCD_Disp(13,1);
   Write_Char(AD1);

   AD10= ADVoltage / 10 | 0x30;       //전압 10자리값 ASCII 코드화
 32c:	c8 01       	movw	r24, r16
 32e:	be 01       	movw	r22, r28
 330:	0e 94 08 02 	call	0x410	; 0x410 <__udivmodhi4>
 334:	08 2f       	mov	r16, r24
   AD1= ADVoltage % 10 | 0x30;       //전압 1자리값 ASCII 코드화

   LCD_Disp(10,0);                  // LCD 첫번째 줄에 전압으로 표시
   Write_Char(AD10);               // 전압 1자리값
 336:	86 2f       	mov	r24, r22
 338:	80 63       	ori	r24, 0x30	; 48
 33a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Write_Char>
   LCD_Write(11,0,".");            // 소수점 포시
 33e:	8b e0       	ldi	r24, 0x0B	; 11
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	51 e0       	ldi	r21, 0x01	; 1
 346:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_Write>
   LCD_Disp(12,0);
 34a:	8c e0       	ldi	r24, 0x0C	; 12
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_Disp>
   Write_Char(AD1);               // 소수점 이하 첫번째 값 표시
 352:	80 2f       	mov	r24, r16
 354:	80 63       	ori	r24, 0x30	; 48
 356:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Write_Char>
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	08 95       	ret

00000368 <init_Port>:

void init_Port(void)
{
   DDRC = 0xff;
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	84 bb       	out	0x14, r24	; 20
  // PORTC = 0xff;
   DDRG = 0xff;
 36c:	80 93 64 00 	sts	0x0064, r24
   //DDRE = 0xef;
   //PORTE = 0x10;
   DDRF = 0xf0;
 370:	80 ef       	ldi	r24, 0xF0	; 240
 372:	80 93 61 00 	sts	0x0061, r24
   DDRB = 0x38;
 376:	88 e3       	ldi	r24, 0x38	; 56
 378:	87 bb       	out	0x17, r24	; 23
   PORTB = 0x30;
 37a:	80 e3       	ldi	r24, 0x30	; 48
 37c:	88 bb       	out	0x18, r24	; 24
}
 37e:	08 95       	ret

00000380 <main>:

int main(void)
{
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
      //unsigned int i;

      init_Port();                     //입출력 포트 초기화
 384:	0e 94 b4 01 	call	0x368	; 0x368 <init_Port>
      initLCD();                  //LCD 초기화
 388:	0e 94 af 00 	call	0x15e	; 0x15e <initLCD>
      initADC_red();                  //AD 변환 초기화
 38c:	0e 94 22 01 	call	0x244	; 0x244 <initADC_red>

      sei();                     //INT 인에이블 clear = 작동안됨
 390:	78 94       	sei

      msDelay(100);
 392:	84 e6       	ldi	r24, 0x64	; 100
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 76 00 	call	0xec	; 0xec <msDelay>
      init_TIMER1_DC();
 39a:	0e 94 8b 00 	call	0x116	; 0x116 <init_TIMER1_DC>
      LCD_cmd(0x01);               //LCD 화면 지우기
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 12 01 	call	0x224	; 0x224 <LCD_cmd>
      msDelay(50);               //지연
 3a4:	82 e3       	ldi	r24, 0x32	; 50
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 76 00 	call	0xec	; 0xec <msDelay>

      LCD_Write(0,0, table1);         //초기 글자 출력
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	4a e1       	ldi	r20, 0x1A	; 26
 3b2:	51 e0       	ldi	r21, 0x01	; 1
 3b4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_Write>
      LCD_Write(0,1, table2);
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	4a e2       	ldi	r20, 0x2A	; 42
 3be:	51 e0       	ldi	r21, 0x01	; 1
 3c0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_Write>
      msDelay(200);
 3c4:	88 ec       	ldi	r24, 0xC8	; 200
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 76 00 	call	0xec	; 0xec <msDelay>

      LCD_cmd(0x01);               //LCD 화면 지우기
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 12 01 	call	0x224	; 0x224 <LCD_cmd>
      msDelay(100);
 3d2:	84 e6       	ldi	r24, 0x64	; 100
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 76 00 	call	0xec	; 0xec <msDelay>

      LCD_Write(0,0,"Voltage :   V");//전압 표시
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	42 e0       	ldi	r20, 0x02	; 2
 3e0:	51 e0       	ldi	r21, 0x01	; 1
 3e2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_Write>
      LCD_Write(0,1, "ADC Data:");   //AD 변환 데이터 표시
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	40 e1       	ldi	r20, 0x10	; 16
 3ec:	51 e0       	ldi	r21, 0x01	; 1
 3ee:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LCD_Write>
      while(1)
      {
        if(ADdata >= 600)
       { OCR1A = 30;}
 3f2:	ce e1       	ldi	r28, 0x1E	; 30
 3f4:	d0 e0       	ldi	r29, 0x00	; 0

      LCD_Write(0,0,"Voltage :   V");//전압 표시
      LCD_Write(0,1, "ADC Data:");   //AD 변환 데이터 표시
      while(1)
      {
        if(ADdata >= 600)
 3f6:	80 91 3a 01 	lds	r24, 0x013A
 3fa:	90 91 3b 01 	lds	r25, 0x013B
 3fe:	22 e0       	ldi	r18, 0x02	; 2
 400:	88 35       	cpi	r24, 0x58	; 88
 402:	92 07       	cpc	r25, r18
 404:	10 f0       	brcs	.+4      	; 0x40a <main+0x8a>
       { OCR1A = 30;}
 406:	db bd       	out	0x2b, r29	; 43
 408:	ca bd       	out	0x2a, r28	; 42
         
         ADCLCD();               //AD 변환 데이터와 전압값 LCD에 표시
 40a:	0e 94 40 01 	call	0x280	; 0x280 <ADCLCD>
      }
 40e:	f3 cf       	rjmp	.-26     	; 0x3f6 <main+0x76>

00000410 <__udivmodhi4>:
 410:	aa 1b       	sub	r26, r26
 412:	bb 1b       	sub	r27, r27
 414:	51 e1       	ldi	r21, 0x11	; 17
 416:	07 c0       	rjmp	.+14     	; 0x426 <__udivmodhi4_ep>

00000418 <__udivmodhi4_loop>:
 418:	aa 1f       	adc	r26, r26
 41a:	bb 1f       	adc	r27, r27
 41c:	a6 17       	cp	r26, r22
 41e:	b7 07       	cpc	r27, r23
 420:	10 f0       	brcs	.+4      	; 0x426 <__udivmodhi4_ep>
 422:	a6 1b       	sub	r26, r22
 424:	b7 0b       	sbc	r27, r23

00000426 <__udivmodhi4_ep>:
 426:	88 1f       	adc	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	5a 95       	dec	r21
 42c:	a9 f7       	brne	.-22     	; 0x418 <__udivmodhi4_loop>
 42e:	80 95       	com	r24
 430:	90 95       	com	r25
 432:	bc 01       	movw	r22, r24
 434:	cd 01       	movw	r24, r26
 436:	08 95       	ret

00000438 <_exit>:
 438:	f8 94       	cli

0000043a <__stop_program>:
 43a:	ff cf       	rjmp	.-2      	; 0x43a <__stop_program>
