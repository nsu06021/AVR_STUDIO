
asdsfkl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000040  00000000  00000000  000008f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000013e  00000000  00000000  00000931  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c4  00000000  00000000  00000a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b0  00000000  00000000  00000b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000009f  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c6  00000000  00000000  00000dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000e99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  54:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  58:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  5c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  60:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  68:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  6c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  70:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  74:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  78:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  7c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  80:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  84:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  88:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  8c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  90:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <usDelay>:
void usDelay (unsigned int us)
{

unsigned int i;

	for(i=0; i<us; i++)
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	08 c0       	rjmp	.+16     	; 0xc2 <usDelay+0x16>
	{

		asm("PUSH R0");
  b2:	0f 92       	push	r0
		asm("POP R0");
  b4:	0f 90       	pop	r0
		asm("PUSH R0");
  b6:	0f 92       	push	r0
		asm("POP R0");
  b8:	0f 90       	pop	r0
		asm("PUSH R0");
  ba:	0f 92       	push	r0
		asm("POP R0");
  bc:	0f 90       	pop	r0
void usDelay (unsigned int us)
{

unsigned int i;

	for(i=0; i<us; i++)
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	28 17       	cp	r18, r24
  c4:	39 07       	cpc	r19, r25
  c6:	a8 f3       	brcs	.-22     	; 0xb2 <usDelay+0x6>
		asm("POP R0");
		asm("PUSH R0");
		asm("POP R0");
	}

}
  c8:	08 95       	ret

000000ca <msDelay>:

void msDelay(unsigned int ms)
{
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	8c 01       	movw	r16, r24

unsigned int i;

for (i=0; i<ms; i++)
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	d0 e0       	ldi	r29, 0x00	; 0
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <msDelay+0x1a>
usDelay(1000);
  da:	88 ee       	ldi	r24, 0xE8	; 232
  dc:	93 e0       	ldi	r25, 0x03	; 3
  de:	0e 94 56 00 	call	0xac	; 0xac <usDelay>
void msDelay(unsigned int ms)
{

unsigned int i;

for (i=0; i<ms; i++)
  e2:	21 96       	adiw	r28, 0x01	; 1
  e4:	c0 17       	cp	r28, r16
  e6:	d1 07       	cpc	r29, r17
  e8:	c0 f3       	brcs	.-16     	; 0xda <msDelay+0x10>
usDelay(1000);

}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	1f 91       	pop	r17
  f0:	0f 91       	pop	r16
  f2:	08 95       	ret

000000f4 <initport>:



void initport(void)
{
DDRA = 0xff;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	81 b9       	out	0x01, r24	; 1

int i;
unsigned char led = 0xfe;


}
  f8:	08 95       	ret

000000fa <main>:



void main (void)
{
  fa:	1f 93       	push	r17

	DDRA = 0xff;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	81 b9       	out	0x01, r24	; 1


	unsigned char led = 0xfe;
 100:	1e ef       	ldi	r17, 0xFE	; 254
		while(1)

		{int i =0;

	
			PORTA=~led;
 102:	81 2f       	mov	r24, r17
 104:	80 95       	com	r24
 106:	82 b9       	out	0x02, r24	; 2
			msDelay(1000);
 108:	88 ee       	ldi	r24, 0xE8	; 232
 10a:	93 e0       	ldi	r25, 0x03	; 3
 10c:	0e 94 65 00 	call	0xca	; 0xca <msDelay>
			
		
			if(led==0x7f)
 110:	1f 37       	cpi	r17, 0x7F	; 127
 112:	19 f0       	breq	.+6      	; 0x11a <main+0x20>
			led = 0xfe;
	
			}
			else{
			
			led=(led<<1)+1;
 114:	11 0f       	add	r17, r17
 116:	1f 5f       	subi	r17, 0xFF	; 255
 118:	01 c0       	rjmp	.+2      	; 0x11c <main+0x22>
			
		
			if(led==0x7f)
			{
		
			led = 0xfe;
 11a:	1e ef       	ldi	r17, 0xFE	; 254
			}
			

		
		
		msDelay(100);
 11c:	84 e6       	ldi	r24, 0x64	; 100
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 65 00 	call	0xca	; 0xca <msDelay>

		}
 124:	ee cf       	rjmp	.-36     	; 0x102 <main+0x8>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
