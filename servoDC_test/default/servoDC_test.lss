
servoDC_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000102  00800100  00800100  0000043a  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bc  00000000  00000000  00000bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000212  00000000  00000000  00000c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000f0  00000000  00000000  00000e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044f  00000000  00000000  00000f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010a  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b8  00000000  00000000  00001586  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000002b  00000000  00000000  0000163e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_21>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 a2 01 	call	0x344	; 0x344 <main>
  ac:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <us_delay>:

void us_delay(unsigned int us)
{
   unsigned int i;

   for(i=0; i<us; i++) {
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	08 c0       	rjmp	.+16     	; 0xca <us_delay+0x16>
      asm("PUSH R0");
  ba:	0f 92       	push	r0
      asm("POP R0");
  bc:	0f 90       	pop	r0
      asm("PUSH R0");
  be:	0f 92       	push	r0
      asm("POP R0");
  c0:	0f 90       	pop	r0
      asm("PUSH R0");
  c2:	0f 92       	push	r0
      asm("POP R0");
  c4:	0f 90       	pop	r0

void us_delay(unsigned int us)
{
   unsigned int i;

   for(i=0; i<us; i++) {
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	28 17       	cp	r18, r24
  cc:	39 07       	cpc	r19, r25
  ce:	a8 f3       	brcs	.-22     	; 0xba <us_delay+0x6>
      asm("PUSH R0");
      asm("POP R0");
      asm("PUSH R0");
      asm("POP R0");
   }
}
  d0:	08 95       	ret

000000d2 <ms_delay>:

void ms_delay(unsigned int ms)
{
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	8c 01       	movw	r16, r24
   unsigned int i;

   for(i=0;i<ms;i++)
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	05 c0       	rjmp	.+10     	; 0xec <ms_delay+0x1a>
      us_delay(1000);
  e2:	88 ee       	ldi	r24, 0xE8	; 232
  e4:	93 e0       	ldi	r25, 0x03	; 3
  e6:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>

void ms_delay(unsigned int ms)
{
   unsigned int i;

   for(i=0;i<ms;i++)
  ea:	21 96       	adiw	r28, 0x01	; 1
  ec:	c0 17       	cp	r28, r16
  ee:	d1 07       	cpc	r29, r17
  f0:	c0 f3       	brcs	.-16     	; 0xe2 <ms_delay+0x10>
      us_delay(1000);
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	1f 91       	pop	r17
  f8:	0f 91       	pop	r16
  fa:	08 95       	ret

000000fc <initADC>:

void initADC(void)
{
   ADMUX = 0x42;   //기준전압; 외부 캐퍼시터 가진AVcc(AREF 핀)
  fc:	82 e4       	ldi	r24, 0x42	; 66
  fe:	87 b9       	out	0x07, r24	; 7
               //AC 변환 데이터 정렬; 오른쪽 정렬
               //AD 변환 채널 선택; PortF 0 핀

   ADCSRA= 0xc8;   //ADC 인에이블, ADC 변환 시작, ADC인터럽트 인에이블
 100:	88 ec       	ldi	r24, 0xC8	; 200
 102:	86 b9       	out	0x06, r24	; 6
               //ADC 클록 설정; XTAL의1/2(8MHz)
}
 104:	08 95       	ret

00000106 <init_redADC>:

void init_redADC(void)
{
   ADMUX = 0x43;   //기준전압; 외부 캐퍼시터 가진AVcc(AREF 핀)
 106:	83 e4       	ldi	r24, 0x43	; 67
 108:	87 b9       	out	0x07, r24	; 7
               //AC 변환 데이터 정렬; 오른쪽 정렬
               //AD 변환 채널 선택; PortF 0 핀

   ADCSRA= 0xc8;   //ADC 인에이블, ADC 변환 시작, ADC인터럽트 인에이블
 10a:	88 ec       	ldi	r24, 0xC8	; 200
 10c:	86 b9       	out	0x06, r24	; 6
               //ADC 클록 설정; XTAL의1/2(8MHz)
}
 10e:	08 95       	ret

00000110 <init_EXT_INT>:

void init_EXT_INT(void)
{
   EICRB = 0xc0;
 110:	80 ec       	ldi	r24, 0xC0	; 192
 112:	8a bf       	out	0x3a, r24	; 58
   EIMSK = 0x80;
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	89 bf       	out	0x39, r24	; 57
   EIFR = 0x80;
 118:	88 bf       	out	0x38, r24	; 56
}
 11a:	08 95       	ret

0000011c <__vector_21>:



SIGNAL(ADC_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
   ADdata=ADC;      //AD 변환 데이터를 ADdata 에 저장
 12a:	84 b1       	in	r24, 0x04	; 4
 12c:	95 b1       	in	r25, 0x05	; 5
 12e:	90 93 01 01 	sts	0x0101, r25
 132:	80 93 00 01 	sts	0x0100, r24
     
   ADCSRA = 0xc8;   //ADC 인에이블, ADC 변환 시작, ADC인터럽트 인에이블
 136:	88 ec       	ldi	r24, 0xC8	; 200
 138:	86 b9       	out	0x06, r24	; 6
}
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <Refresh>:

void Refresh()
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
   int i;

   SI_1;
 14c:	80 91 62 00 	lds	r24, 0x0062
 150:	82 60       	ori	r24, 0x02	; 2
 152:	80 93 62 00 	sts	0x0062, r24
   us_delay(SI_WIDTH);
 156:	88 ee       	ldi	r24, 0xE8	; 232
 158:	93 e0       	ldi	r25, 0x03	; 3
 15a:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
   CLK_1;
 15e:	80 91 62 00 	lds	r24, 0x0062
 162:	81 60       	ori	r24, 0x01	; 1
 164:	80 93 62 00 	sts	0x0062, r24
   us_delay(SI_WIDTH);
 168:	88 ee       	ldi	r24, 0xE8	; 232
 16a:	93 e0       	ldi	r25, 0x03	; 3
 16c:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
   SI_0;
 170:	80 91 62 00 	lds	r24, 0x0062
 174:	8d 7f       	andi	r24, 0xFD	; 253
 176:	80 93 62 00 	sts	0x0062, r24
   us_delay(SI_WIDTH);
 17a:	88 ee       	ldi	r24, 0xE8	; 232
 17c:	93 e0       	ldi	r25, 0x03	; 3
 17e:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
   CLK_0;
 182:	80 91 62 00 	lds	r24, 0x0062
 186:	8e 7f       	andi	r24, 0xFE	; 254
 188:	80 93 62 00 	sts	0x0062, r24
 18c:	c6 e9       	ldi	r28, 0x96	; 150
 18e:	d0 e0       	ldi	r29, 0x00	; 0

   for(i=0;i<150;i++){
      CLK_1;
 190:	80 91 62 00 	lds	r24, 0x0062
 194:	81 60       	ori	r24, 0x01	; 1
 196:	80 93 62 00 	sts	0x0062, r24
      us_delay(CLK_WIDTH );
 19a:	8a e0       	ldi	r24, 0x0A	; 10
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
      CLK_0;
 1a2:	80 91 62 00 	lds	r24, 0x0062
 1a6:	8e 7f       	andi	r24, 0xFE	; 254
 1a8:	80 93 62 00 	sts	0x0062, r24
      us_delay(CLK_WIDTH );
 1ac:	8a e0       	ldi	r24, 0x0A	; 10
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
 1b4:	21 97       	sbiw	r28, 0x01	; 1
   us_delay(SI_WIDTH);
   SI_0;
   us_delay(SI_WIDTH);
   CLK_0;

   for(i=0;i<150;i++){
 1b6:	61 f7       	brne	.-40     	; 0x190 <Refresh+0x48>
      CLK_1;
      us_delay(CLK_WIDTH );
      CLK_0;
      us_delay(CLK_WIDTH );
   }
   SI_1;
 1b8:	80 91 62 00 	lds	r24, 0x0062
 1bc:	82 60       	ori	r24, 0x02	; 2
 1be:	80 93 62 00 	sts	0x0062, r24
   us_delay(SI_WIDTH);
 1c2:	88 ee       	ldi	r24, 0xE8	; 232
 1c4:	93 e0       	ldi	r25, 0x03	; 3
 1c6:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <init_TIMER1>:

void init_TIMER1(void)
{
   TCCR1A = 0xA2;   //0x22
 1d0:	82 ea       	ldi	r24, 0xA2	; 162
 1d2:	8f bd       	out	0x2f, r24	; 47
   TCCR1B = 0x1A;
 1d4:	8a e1       	ldi	r24, 0x1A	; 26
 1d6:	8e bd       	out	0x2e, r24	; 46
   TCCR1C = 0; 
 1d8:	10 92 7a 00 	sts	0x007A, r1
   TCNT1 = 0;
 1dc:	1d bc       	out	0x2d, r1	; 45
 1de:	1c bc       	out	0x2c, r1	; 44
   OCR1A = 40000;  //75%~
 1e0:	80 e4       	ldi	r24, 0x40	; 64
 1e2:	9c e9       	ldi	r25, 0x9C	; 156
 1e4:	9b bd       	out	0x2b, r25	; 43
 1e6:	8a bd       	out	0x2a, r24	; 42
   OCR1B = 2200;   //2800(L)~2200(C)~1800(R)
 1e8:	28 e9       	ldi	r18, 0x98	; 152
 1ea:	38 e0       	ldi	r19, 0x08	; 8
 1ec:	39 bd       	out	0x29, r19	; 41
 1ee:	28 bd       	out	0x28, r18	; 40
   ICR1 = 40000;
 1f0:	97 bd       	out	0x27, r25	; 39
 1f2:	86 bd       	out	0x26, r24	; 38
   TIFR = 0x00;
 1f4:	16 be       	out	0x36, r1	; 54
   TIMSK = 0x00;
 1f6:	17 be       	out	0x37, r1	; 55
   ETIMSK = 0x00;
 1f8:	10 92 7d 00 	sts	0x007D, r1
   ETIFR = 0x00;
 1fc:	10 92 7c 00 	sts	0x007C, r1
}
 200:	08 95       	ret

00000202 <ConShot>:

void ConShot()
{
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
   int i;    

   SI_0;
 206:	80 91 62 00 	lds	r24, 0x0062
 20a:	8d 7f       	andi	r24, 0xFD	; 253
 20c:	80 93 62 00 	sts	0x0062, r24
   CLK_0;
 210:	80 91 62 00 	lds	r24, 0x0062
 214:	8e 7f       	andi	r24, 0xFE	; 254
 216:	80 93 62 00 	sts	0x0062, r24
   us_delay(SI_WIDTH);
 21a:	88 ee       	ldi	r24, 0xE8	; 232
 21c:	93 e0       	ldi	r25, 0x03	; 3
 21e:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
   SI_1;
 222:	80 91 62 00 	lds	r24, 0x0062
 226:	82 60       	ori	r24, 0x02	; 2
 228:	80 93 62 00 	sts	0x0062, r24
   us_delay(SI_WIDTH);
 22c:	88 ee       	ldi	r24, 0xE8	; 232
 22e:	93 e0       	ldi	r25, 0x03	; 3
 230:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
   CLK_1;
 234:	80 91 62 00 	lds	r24, 0x0062
 238:	81 60       	ori	r24, 0x01	; 1
 23a:	80 93 62 00 	sts	0x0062, r24
   us_delay(CLK_WIDTH );
 23e:	8a e0       	ldi	r24, 0x0A	; 10
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
   SI_0;
 246:	80 91 62 00 	lds	r24, 0x0062
 24a:	8d 7f       	andi	r24, 0xFD	; 253
 24c:	80 93 62 00 	sts	0x0062, r24
   us_delay(CLK_WIDTH );
 250:	8a e0       	ldi	r24, 0x0A	; 10
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
   CLK_0;
 258:	80 91 62 00 	lds	r24, 0x0062
 25c:	8e 7f       	andi	r24, 0xFE	; 254
 25e:	80 93 62 00 	sts	0x0062, r24
 262:	c2 e0       	ldi	r28, 0x02	; 2
 264:	d1 e0       	ldi	r29, 0x01	; 1
   

   for(i=0;i<128;i++){
      CLK_1;
 266:	80 91 62 00 	lds	r24, 0x0062
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	80 93 62 00 	sts	0x0062, r24
      us_delay(CLK_WIDTH );
 270:	8a e0       	ldi	r24, 0x0A	; 10
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
      CLK_0;
 278:	80 91 62 00 	lds	r24, 0x0062
 27c:	8e 7f       	andi	r24, 0xFE	; 254
 27e:	80 93 62 00 	sts	0x0062, r24
      us_delay(CLK_WIDTH );
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
      line[i] = ADdata;
 28a:	80 91 00 01 	lds	r24, 0x0100
 28e:	90 91 01 01 	lds	r25, 0x0101
 292:	89 93       	st	Y+, r24
 294:	99 93       	st	Y+, r25
   SI_0;
   us_delay(CLK_WIDTH );
   CLK_0;
   

   for(i=0;i<128;i++){
 296:	22 e0       	ldi	r18, 0x02	; 2
 298:	c2 30       	cpi	r28, 0x02	; 2
 29a:	d2 07       	cpc	r29, r18
 29c:	21 f7       	brne	.-56     	; 0x266 <ConShot+0x64>
      CLK_0;
      us_delay(CLK_WIDTH );
      line[i] = ADdata;
   }
   
   if((line[122]+line[123]+line[124]+line[125]+line[126])/5<500)
 29e:	80 91 f8 01 	lds	r24, 0x01F8
 2a2:	90 91 f9 01 	lds	r25, 0x01F9
 2a6:	20 91 f6 01 	lds	r18, 0x01F6
 2aa:	30 91 f7 01 	lds	r19, 0x01F7
 2ae:	82 0f       	add	r24, r18
 2b0:	93 1f       	adc	r25, r19
 2b2:	20 91 fa 01 	lds	r18, 0x01FA
 2b6:	30 91 fb 01 	lds	r19, 0x01FB
 2ba:	82 0f       	add	r24, r18
 2bc:	93 1f       	adc	r25, r19
 2be:	20 91 fc 01 	lds	r18, 0x01FC
 2c2:	30 91 fd 01 	lds	r19, 0x01FD
 2c6:	82 0f       	add	r24, r18
 2c8:	93 1f       	adc	r25, r19
 2ca:	20 91 fe 01 	lds	r18, 0x01FE
 2ce:	30 91 ff 01 	lds	r19, 0x01FF
 2d2:	82 0f       	add	r24, r18
 2d4:	93 1f       	adc	r25, r19
 2d6:	29 e0       	ldi	r18, 0x09	; 9
 2d8:	84 3c       	cpi	r24, 0xC4	; 196
 2da:	92 07       	cpc	r25, r18
 2dc:	20 f4       	brcc	.+8      	; 0x2e6 <ConShot+0xe4>
   {
      OCR1B = 2800;
 2de:	80 ef       	ldi	r24, 0xF0	; 240
 2e0:	9a e0       	ldi	r25, 0x0A	; 10
 2e2:	99 bd       	out	0x29, r25	; 41
 2e4:	88 bd       	out	0x28, r24	; 40
   }
   if((line[1]+line[2]+line[3]+line[4]+line[5])/5<500)
 2e6:	80 91 06 01 	lds	r24, 0x0106
 2ea:	90 91 07 01 	lds	r25, 0x0107
 2ee:	20 91 04 01 	lds	r18, 0x0104
 2f2:	30 91 05 01 	lds	r19, 0x0105
 2f6:	82 0f       	add	r24, r18
 2f8:	93 1f       	adc	r25, r19
 2fa:	20 91 08 01 	lds	r18, 0x0108
 2fe:	30 91 09 01 	lds	r19, 0x0109
 302:	82 0f       	add	r24, r18
 304:	93 1f       	adc	r25, r19
 306:	20 91 0a 01 	lds	r18, 0x010A
 30a:	30 91 0b 01 	lds	r19, 0x010B
 30e:	82 0f       	add	r24, r18
 310:	93 1f       	adc	r25, r19
 312:	20 91 0c 01 	lds	r18, 0x010C
 316:	30 91 0d 01 	lds	r19, 0x010D
 31a:	82 0f       	add	r24, r18
 31c:	93 1f       	adc	r25, r19
 31e:	29 e0       	ldi	r18, 0x09	; 9
 320:	84 3c       	cpi	r24, 0xC4	; 196
 322:	92 07       	cpc	r25, r18
 324:	20 f4       	brcc	.+8      	; 0x32e <ConShot+0x12c>
   {
      OCR1B = 1800;
 326:	88 e0       	ldi	r24, 0x08	; 8
 328:	97 e0       	ldi	r25, 0x07	; 7
 32a:	99 bd       	out	0x29, r25	; 41
 32c:	88 bd       	out	0x28, r24	; 40
   /*else
   {
      OCR1B = 2200;
   }*/
   
}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <init_Port>:

void init_Port(void)
{
   DDRB = 0x78;
 334:	88 e7       	ldi	r24, 0x78	; 120
 336:	87 bb       	out	0x17, r24	; 23
   PORTB = 0x30;
 338:	80 e3       	ldi	r24, 0x30	; 48
 33a:	88 bb       	out	0x18, r24	; 24
   //DDRB = 0x58;
   DDRF = 0xf3;
 33c:	83 ef       	ldi	r24, 0xF3	; 243
 33e:	80 93 61 00 	sts	0x0061, r24
}
 342:	08 95       	ret

00000344 <main>:

int main(void)
{
 344:	ef 92       	push	r14
 346:	ff 92       	push	r15
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
   init_Port();
 34c:	0e 94 9a 01 	call	0x334	; 0x334 <init_Port>
   ms_delay(100);
 350:	84 e6       	ldi	r24, 0x64	; 100
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 69 00 	call	0xd2	; 0xd2 <ms_delay>
   init_TIMER1();
 358:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <init_TIMER1>
   initADC();
 35c:	0e 94 7e 00 	call	0xfc	; 0xfc <initADC>
   

   sei();                     //INT 인에이블 clear = 작동안됨
 360:	78 94       	sei

   CLK_0;
 362:	80 91 62 00 	lds	r24, 0x0062
 366:	8e 7f       	andi	r24, 0xFE	; 254
 368:	80 93 62 00 	sts	0x0062, r24
   SI_0;
 36c:	80 91 62 00 	lds	r24, 0x0062
 370:	8d 7f       	andi	r24, 0xFD	; 253
 372:	80 93 62 00 	sts	0x0062, r24
   Refresh();
 376:	0e 94 a4 00 	call	0x148	; 0x148 <Refresh>
   SI_0;
 37a:	80 91 62 00 	lds	r24, 0x0062
 37e:	8d 7f       	andi	r24, 0xFD	; 253
 380:	80 93 62 00 	sts	0x0062, r24

   while(1)
   {
       ConShot();
	  
	   ADMUX = 0x43;
 384:	93 e4       	ldi	r25, 0x43	; 67
 386:	e9 2e       	mov	r14, r25
	   ADCSRA= 0xc8;
 388:	18 ec       	ldi	r17, 0xC8	; 200
       
       
	   if(ADdata >= 600)
       {
	     //OCR1A = 0;
		 PORTB = 0x18;
 38a:	88 e1       	ldi	r24, 0x18	; 24
 38c:	f8 2e       	mov	r15, r24
	   }
	   
       else
	   {
	      
	      ADMUX = 0x42;
 38e:	02 e4       	ldi	r16, 0x42	; 66

  // ms_delay(100);

   while(1)
   {
       ConShot();
 390:	0e 94 01 01 	call	0x202	; 0x202 <ConShot>
	  
	   ADMUX = 0x43;
 394:	e7 b8       	out	0x07, r14	; 7
	   ADCSRA= 0xc8;
 396:	16 b9       	out	0x06, r17	; 6
	   
	   us_delay(100);
 398:	84 e6       	ldi	r24, 0x64	; 100
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
       
       
	   if(ADdata >= 600)
 3a0:	80 91 00 01 	lds	r24, 0x0100
 3a4:	90 91 01 01 	lds	r25, 0x0101
 3a8:	22 e0       	ldi	r18, 0x02	; 2
 3aa:	88 35       	cpi	r24, 0x58	; 88
 3ac:	92 07       	cpc	r25, r18
 3ae:	10 f0       	brcs	.+4      	; 0x3b4 <main+0x70>
       {
	     //OCR1A = 0;
		 PORTB = 0x18;
 3b0:	f8 ba       	out	0x18, r15	; 24
 3b2:	ee cf       	rjmp	.-36     	; 0x390 <main+0x4c>
	   }
	   
       else
	   {
	      
	      ADMUX = 0x42;
 3b4:	07 b9       	out	0x07, r16	; 7
		  ADCSRA= 0xc8;
 3b6:	16 b9       	out	0x06, r17	; 6

		  us_delay(100);
 3b8:	84 e6       	ldi	r24, 0x64	; 100
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 5a 00 	call	0xb4	; 0xb4 <us_delay>
 3c0:	e7 cf       	rjmp	.-50     	; 0x390 <main+0x4c>

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
